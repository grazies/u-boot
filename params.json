{
  "name": "U-boot",
  "tagline": "",
  "body": "#\r\n# (C) Copyright 2000 - 2011\r\n# Wolfgang Denk, DENX Software Engineering, wd@denx.de.\r\n#\r\n# See file CREDITS for list of people who contributed to this\r\n# project.\r\n#\r\n# This program is free software; you can redistribute it and/or\r\n# modify it under the terms of the GNU General Public License as\r\n# published by the Free Software Foundation; either version 2 of\r\n# the License, or (at your option) any later version.\r\n#\r\n# This program is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\tSee the\r\n# GNU General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU General Public License\r\n# along with this program; if not, write to the Free Software\r\n# Foundation, Inc., 59 Temple Place, Suite 330, Boston,\r\n# MA 02111-1307 USA\r\n#\r\n\r\nSummary:\r\n========\r\n\r\nThis directory contains the source code for U-Boot, a boot loader for\r\nEmbedded boards based on PowerPC, ARM, MIPS and several other\r\nprocessors, which can be installed in a boot ROM and used to\r\ninitialize and test the hardware or to download and run application\r\ncode.\r\n\r\nThe development of U-Boot is closely related to Linux: some parts of\r\nthe source code originate in the Linux source tree, we have some\r\nheader files in common, and special provision has been made to\r\nsupport booting of Linux images.\r\n\r\nSome attention has been paid to make this software easily\r\nconfigurable and extendable. For instance, all monitor commands are\r\nimplemented with the same call interface, so that it's very easy to\r\nadd new commands. Also, instead of permanently adding rarely used\r\ncode (for instance hardware test utilities) to the monitor, you can\r\nload and run it dynamically.\r\n\r\n\r\nStatus:\r\n=======\r\n\r\nIn general, all boards for which a configuration option exists in the\r\nMakefile have been tested to some extent and can be considered\r\n\"working\". In fact, many of them are used in production systems.\r\n\r\nIn case of problems see the CHANGELOG and CREDITS files to find out\r\nwho contributed the specific port. The MAINTAINERS file lists board\r\nmaintainers.\r\n\r\n\r\nWhere to get help:\r\n==================\r\n\r\nIn case you have questions about, problems with or contributions for\r\nU-Boot you should send a message to the U-Boot mailing list at\r\n<u-boot@lists.denx.de>. There is also an archive of previous traffic\r\non the mailing list - please search the archive before asking FAQ's.\r\nPlease see http://lists.denx.de/pipermail/u-boot and\r\nhttp://dir.gmane.org/gmane.comp.boot-loaders.u-boot\r\n\r\n\r\nWhere to get source code:\r\n=========================\r\n\r\nThe U-Boot source code is maintained in the git repository at\r\ngit://www.denx.de/git/u-boot.git ; you can browse it online at\r\nhttp://www.denx.de/cgi-bin/gitweb.cgi?p=u-boot.git;a=summary\r\n\r\nThe \"snapshot\" links on this page allow you to download tarballs of\r\nany version you might be interested in. Official releases are also\r\navailable for FTP download from the ftp://ftp.denx.de/pub/u-boot/\r\ndirectory.\r\n\r\nPre-built (and tested) images are available from\r\nftp://ftp.denx.de/pub/u-boot/images/\r\n\r\n\r\nWhere we come from:\r\n===================\r\n\r\n- start from 8xxrom sources\r\n- create PPCBoot project (http://sourceforge.net/projects/ppcboot)\r\n- clean up code\r\n- make it easier to add custom boards\r\n- make it possible to add other [PowerPC] CPUs\r\n- extend functions, especially:\r\n  * Provide extended interface to Linux boot loader\r\n  * S-Record download\r\n  * network boot\r\n  * PCMCIA / CompactFlash / ATA disk / SCSI ... boot\r\n- create ARMBoot project (http://sourceforge.net/projects/armboot)\r\n- add other CPU families (starting with ARM)\r\n- create U-Boot project (http://sourceforge.net/projects/u-boot)\r\n- current project page: see http://www.denx.de/wiki/U-Boot\r\n\r\n\r\nNames and Spelling:\r\n===================\r\n\r\nThe \"official\" name of this project is \"Das U-Boot\". The spelling\r\n\"U-Boot\" shall be used in all written text (documentation, comments\r\nin source files etc.). Example:\r\n\r\n\tThis is the README file for the U-Boot project.\r\n\r\nFile names etc. shall be based on the string \"u-boot\". Examples:\r\n\r\n\tinclude/asm-ppc/u-boot.h\r\n\r\n\t#include <asm/u-boot.h>\r\n\r\nVariable names, preprocessor constants etc. shall be either based on\r\nthe string \"u_boot\" or on \"U_BOOT\". Example:\r\n\r\n\tU_BOOT_VERSION\t\tu_boot_logo\r\n\tIH_OS_U_BOOT\t\tu_boot_hush_start\r\n\r\n\r\nVersioning:\r\n===========\r\n\r\nStarting with the release in October 2008, the names of the releases\r\nwere changed from numerical release numbers without deeper meaning\r\ninto a time stamp based numbering. Regular releases are identified by\r\nnames consisting of the calendar year and month of the release date.\r\nAdditional fields (if present) indicate release candidates or bug fix\r\nreleases in \"stable\" maintenance trees.\r\n\r\nExamples:\r\n\tU-Boot v2009.11     - Release November 2009\r\n\tU-Boot v2009.11.1   - Release 1 in version November 2009 stable tree\r\n\tU-Boot v2010.09-rc1 - Release candiate 1 for September 2010 release\r\n\r\n\r\nDirectory Hierarchy:\r\n====================\r\n\r\n/arch\t\t\tArchitecture specific files\r\n  /arm\t\t\tFiles generic to ARM architecture\r\n    /cpu\t\tCPU specific files\r\n      /arm720t\t\tFiles specific to ARM 720 CPUs\r\n      /arm920t\t\tFiles specific to ARM 920 CPUs\r\n\t/at91rm9200\tFiles specific to Atmel AT91RM9200 CPU\r\n\t/imx\t\tFiles specific to Freescale MC9328 i.MX CPUs\r\n\t/s3c24x0\tFiles specific to Samsung S3C24X0 CPUs\r\n      /arm925t\t\tFiles specific to ARM 925 CPUs\r\n      /arm926ejs\tFiles specific to ARM 926 CPUs\r\n      /arm1136\t\tFiles specific to ARM 1136 CPUs\r\n      /ixp\t\tFiles specific to Intel XScale IXP CPUs\r\n      /pxa\t\tFiles specific to Intel XScale PXA CPUs\r\n      /s3c44b0\t\tFiles specific to Samsung S3C44B0 CPUs\r\n      /sa1100\t\tFiles specific to Intel StrongARM SA1100 CPUs\r\n    /lib\t\tArchitecture specific library files\r\n  /avr32\t\tFiles generic to AVR32 architecture\r\n    /cpu\t\tCPU specific files\r\n    /lib\t\tArchitecture specific library files\r\n  /blackfin\t\tFiles generic to Analog Devices Blackfin architecture\r\n    /cpu\t\tCPU specific files\r\n    /lib\t\tArchitecture specific library files\r\n  /x86\t\t\tFiles generic to x86 architecture\r\n    /cpu\t\tCPU specific files\r\n    /lib\t\tArchitecture specific library files\r\n  /m68k\t\t\tFiles generic to m68k architecture\r\n    /cpu\t\tCPU specific files\r\n      /mcf52x2\t\tFiles specific to Freescale ColdFire MCF52x2 CPUs\r\n      /mcf5227x\t\tFiles specific to Freescale ColdFire MCF5227x CPUs\r\n      /mcf532x\t\tFiles specific to Freescale ColdFire MCF5329 CPUs\r\n      /mcf5445x\t\tFiles specific to Freescale ColdFire MCF5445x CPUs\r\n      /mcf547x_8x\tFiles specific to Freescale ColdFire MCF547x_8x CPUs\r\n    /lib\t\tArchitecture specific library files\r\n  /microblaze\t\tFiles generic to microblaze architecture\r\n    /cpu\t\tCPU specific files\r\n    /lib\t\tArchitecture specific library files\r\n  /mips\t\t\tFiles generic to MIPS architecture\r\n    /cpu\t\tCPU specific files\r\n    /lib\t\tArchitecture specific library files\r\n  /nios2\t\tFiles generic to Altera NIOS2 architecture\r\n    /cpu\t\tCPU specific files\r\n    /lib\t\tArchitecture specific library files\r\n  /powerpc\t\tFiles generic to PowerPC architecture\r\n    /cpu\t\tCPU specific files\r\n      /74xx_7xx\t\tFiles specific to Freescale MPC74xx and 7xx CPUs\r\n      /mpc5xx\t\tFiles specific to Freescale MPC5xx CPUs\r\n      /mpc5xxx\t\tFiles specific to Freescale MPC5xxx CPUs\r\n      /mpc8xx\t\tFiles specific to Freescale MPC8xx CPUs\r\n      /mpc8220\t\tFiles specific to Freescale MPC8220 CPUs\r\n      /mpc824x\t\tFiles specific to Freescale MPC824x CPUs\r\n      /mpc8260\t\tFiles specific to Freescale MPC8260 CPUs\r\n      /mpc85xx\t\tFiles specific to Freescale MPC85xx CPUs\r\n      /ppc4xx\t\tFiles specific to AMCC PowerPC 4xx CPUs\r\n    /lib\t\tArchitecture specific library files\r\n  /sh\t\t\tFiles generic to SH architecture\r\n    /cpu\t\tCPU specific files\r\n      /sh2\t\tFiles specific to sh2 CPUs\r\n      /sh3\t\tFiles specific to sh3 CPUs\r\n      /sh4\t\tFiles specific to sh4 CPUs\r\n    /lib\t\tArchitecture specific library files\r\n  /sparc\t\tFiles generic to SPARC architecture\r\n    /cpu\t\tCPU specific files\r\n      /leon2\t\tFiles specific to Gaisler LEON2 SPARC CPU\r\n      /leon3\t\tFiles specific to Gaisler LEON3 SPARC CPU\r\n    /lib\t\tArchitecture specific library files\r\n/api\t\t\tMachine/arch independent API for external apps\r\n/board\t\t\tBoard dependent files\r\n/common\t\t\tMisc architecture independent functions\r\n/disk\t\t\tCode for disk drive partition handling\r\n/doc\t\t\tDocumentation (don't expect too much)\r\n/drivers\t\tCommonly used device drivers\r\n/examples\t\tExample code for standalone applications, etc.\r\n/fs\t\t\tFilesystem code (cramfs, ext2, jffs2, etc.)\r\n/include\t\tHeader Files\r\n/lib\t\t\tFiles generic to all architectures\r\n  /libfdt\t\tLibrary files to support flattened device trees\r\n  /lzma\t\t\tLibrary files to support LZMA decompression\r\n  /lzo\t\t\tLibrary files to support LZO decompression\r\n/net\t\t\tNetworking code\r\n/post\t\t\tPower On Self Test\r\n/rtc\t\t\tReal Time Clock drivers\r\n/tools\t\t\tTools to build S-Record or U-Boot images, etc.\r\n\r\nSoftware Configuration:\r\n=======================\r\n\r\nConfiguration is usually done using C preprocessor defines; the\r\nrationale behind that is to avoid dead code whenever possible.\r\n\r\nThere are two classes of configuration variables:\r\n\r\n* Configuration _OPTIONS_:\r\n  These are selectable by the user and have names beginning with\r\n  \"CONFIG_\".\r\n\r\n* Configuration _SETTINGS_:\r\n  These depend on the hardware etc. and should not be meddled with if\r\n  you don't know what you're doing; they have names beginning with\r\n  \"CONFIG_SYS_\".\r\n\r\nLater we will add a configuration tool - probably similar to or even\r\nidentical to what's used for the Linux kernel. Right now, we have to\r\ndo the configuration by hand, which means creating some symbolic\r\nlinks and editing some configuration files. We use the TQM8xxL boards\r\nas an example here.\r\n\r\n\r\nSelection of Processor Architecture and Board Type:\r\n---------------------------------------------------\r\n\r\nFor all supported boards there are ready-to-use default\r\nconfigurations available; just type \"make <board_name>_config\".\r\n\r\nExample: For a TQM823L module type:\r\n\r\n\tcd u-boot\r\n\tmake TQM823L_config\r\n\r\nFor the Cogent platform, you need to specify the CPU type as well;\r\ne.g. \"make cogent_mpc8xx_config\". And also configure the cogent\r\ndirectory according to the instructions in cogent/README.\r\n\r\n\r\nConfiguration Options:\r\n----------------------\r\n\r\nConfiguration depends on the combination of board and CPU type; all\r\nsuch information is kept in a configuration file\r\n\"include/configs/<board_name>.h\".\r\n\r\nExample: For a TQM823L module, all configuration settings are in\r\n\"include/configs/TQM823L.h\".\r\n\r\n\r\nMany of the options are named exactly as the corresponding Linux\r\nkernel configuration options. The intention is to make it easier to\r\nbuild a config tool - later.\r\n\r\n\r\nThe following options need to be configured:\r\n\r\n- CPU Type:\tDefine exactly one, e.g. CONFIG_MPC85XX.\r\n\r\n- Board Type:\tDefine exactly one, e.g. CONFIG_MPC8540ADS.\r\n\r\n- CPU Daughterboard Type: (if CONFIG_ATSTK1000 is defined)\r\n\t\tDefine exactly one, e.g. CONFIG_ATSTK1002\r\n\r\n- CPU Module Type: (if CONFIG_COGENT is defined)\r\n\t\tDefine exactly one of\r\n\t\tCONFIG_CMA286_60_OLD\r\n--- FIXME --- not tested yet:\r\n\t\tCONFIG_CMA286_60, CONFIG_CMA286_21, CONFIG_CMA286_60P,\r\n\t\tCONFIG_CMA287_23, CONFIG_CMA287_50\r\n\r\n- Motherboard Type: (if CONFIG_COGENT is defined)\r\n\t\tDefine exactly one of\r\n\t\tCONFIG_CMA101, CONFIG_CMA102\r\n\r\n- Motherboard I/O Modules: (if CONFIG_COGENT is defined)\r\n\t\tDefine one or more of\r\n\t\tCONFIG_CMA302\r\n\r\n- Motherboard Options: (if CONFIG_CMA101 or CONFIG_CMA102 are defined)\r\n\t\tDefine one or more of\r\n\t\tCONFIG_LCD_HEARTBEAT\t- update a character position on\r\n\t\t\t\t\t  the LCD display every second with\r\n\t\t\t\t\t  a \"rotator\" |\\-/|\\-/\r\n\r\n- Board flavour: (if CONFIG_MPC8260ADS is defined)\r\n\t\tCONFIG_ADSTYPE\r\n\t\tPossible values are:\r\n\t\t\tCONFIG_SYS_8260ADS\t- original MPC8260ADS\r\n\t\t\tCONFIG_SYS_8266ADS\t- MPC8266ADS\r\n\t\t\tCONFIG_SYS_PQ2FADS\t- PQ2FADS-ZU or PQ2FADS-VR\r\n\t\t\tCONFIG_SYS_8272ADS\t- MPC8272ADS\r\n\r\n- Marvell Family Member\r\n\t\tCONFIG_SYS_MVFS\t\t- define it if you want to enable\r\n\t\t\t\t\t  multiple fs option at one time\r\n\t\t\t\t\t  for marvell soc family\r\n\r\n- MPC824X Family Member (if CONFIG_MPC824X is defined)\r\n\t\tDefine exactly one of\r\n\t\tCONFIG_MPC8240, CONFIG_MPC8245\r\n\r\n- 8xx CPU Options: (if using an MPC8xx CPU)\r\n\t\tCONFIG_8xx_GCLK_FREQ\t- deprecated: CPU clock if\r\n\t\t\t\t\t  get_gclk_freq() cannot work\r\n\t\t\t\t\t  e.g. if there is no 32KHz\r\n\t\t\t\t\t  reference PIT/RTC clock\r\n\t\tCONFIG_8xx_OSCLK\t- PLL input clock (either EXTCLK\r\n\t\t\t\t\t  or XTAL/EXTAL)\r\n\r\n- 859/866/885 CPU options: (if using a MPC859 or MPC866 or MPC885 CPU):\r\n\t\tCONFIG_SYS_8xx_CPUCLK_MIN\r\n\t\tCONFIG_SYS_8xx_CPUCLK_MAX\r\n\t\tCONFIG_8xx_CPUCLK_DEFAULT\r\n\t\t\tSee doc/README.MPC866\r\n\r\n\t\tCONFIG_SYS_MEASURE_CPUCLK\r\n\r\n\t\tDefine this to measure the actual CPU clock instead\r\n\t\tof relying on the correctness of the configured\r\n\t\tvalues. Mostly useful for board bringup to make sure\r\n\t\tthe PLL is locked at the intended frequency. Note\r\n\t\tthat this requires a (stable) reference clock (32 kHz\r\n\t\tRTC clock or CONFIG_SYS_8XX_XIN)\r\n\r\n\t\tCONFIG_SYS_DELAYED_ICACHE\r\n\r\n\t\tDefine this option if you want to enable the\r\n\t\tICache only when Code runs from RAM.\r\n\r\n- 85xx CPU Options:\r\n\t\tCONFIG_SYS_FSL_TBCLK_DIV\r\n\r\n\t\tDefines the core time base clock divider ratio compared to the\r\n\t\tsystem clock.  On most PQ3 devices this is 8, on newer QorIQ\r\n\t\tdevices it can be 16 or 32.  The ratio varies from SoC to Soc.\r\n\r\n\t\tCONFIG_SYS_FSL_PCIE_COMPAT\r\n\r\n\t\tDefines the string to utilize when trying to match PCIe device\r\n\t\ttree nodes for the given platform.\r\n\r\n- Intel Monahans options:\r\n\t\tCONFIG_SYS_MONAHANS_RUN_MODE_OSC_RATIO\r\n\r\n\t\tDefines the Monahans run mode to oscillator\r\n\t\tratio. Valid values are 8, 16, 24, 31. The core\r\n\t\tfrequency is this value multiplied by 13 MHz.\r\n\r\n\t\tCONFIG_SYS_MONAHANS_TURBO_RUN_MODE_RATIO\r\n\r\n\t\tDefines the Monahans turbo mode to oscillator\r\n\t\tratio. Valid values are 1 (default if undefined) and\r\n\t\t2. The core frequency as calculated above is multiplied\r\n\t\tby this value.\r\n\r\n- Linux Kernel Interface:\r\n\t\tCONFIG_CLOCKS_IN_MHZ\r\n\r\n\t\tU-Boot stores all clock information in Hz\r\n\t\tinternally. For binary compatibility with older Linux\r\n\t\tkernels (which expect the clocks passed in the\r\n\t\tbd_info data to be in MHz) the environment variable\r\n\t\t\"clocks_in_mhz\" can be defined so that U-Boot\r\n\t\tconverts clock data to MHZ before passing it to the\r\n\t\tLinux kernel.\r\n\t\tWhen CONFIG_CLOCKS_IN_MHZ is defined, a definition of\r\n\t\t\"clocks_in_mhz=1\" is automatically included in the\r\n\t\tdefault environment.\r\n\r\n\t\tCONFIG_MEMSIZE_IN_BYTES\t\t[relevant for MIPS only]\r\n\r\n\t\tWhen transferring memsize parameter to linux, some versions\r\n\t\texpect it to be in bytes, others in MB.\r\n\t\tDefine CONFIG_MEMSIZE_IN_BYTES to make it in bytes.\r\n\r\n\t\tCONFIG_OF_LIBFDT\r\n\r\n\t\tNew kernel versions are expecting firmware settings to be\r\n\t\tpassed using flattened device trees (based on open firmware\r\n\t\tconcepts).\r\n\r\n\t\tCONFIG_OF_LIBFDT\r\n\t\t * New libfdt-based support\r\n\t\t * Adds the \"fdt\" command\r\n\t\t * The bootm command automatically updates the fdt\r\n\r\n\t\tOF_CPU - The proper name of the cpus node (only required for\r\n\t\t\tMPC512X and MPC5xxx based boards).\r\n\t\tOF_SOC - The proper name of the soc node (only required for\r\n\t\t\tMPC512X and MPC5xxx based boards).\r\n\t\tOF_TBCLK - The timebase frequency.\r\n\t\tOF_STDOUT_PATH - The path to the console device\r\n\r\n\t\tboards with QUICC Engines require OF_QE to set UCC MAC\r\n\t\taddresses\r\n\r\n\t\tCONFIG_OF_BOARD_SETUP\r\n\r\n\t\tBoard code has addition modification that it wants to make\r\n\t\tto the flat device tree before handing it off to the kernel\r\n\r\n\t\tCONFIG_OF_BOOT_CPU\r\n\r\n\t\tThis define fills in the correct boot CPU in the boot\r\n\t\tparam header, the default value is zero if undefined.\r\n\r\n\t\tCONFIG_OF_IDE_FIXUP\r\n\r\n\t\tU-Boot can detect if an IDE device is present or not.\r\n\t\tIf not, and this new config option is activated, U-Boot\r\n\t\tremoves the ATA node from the DTS before booting Linux,\r\n\t\tso the Linux IDE driver does not probe the device and\r\n\t\tcrash. This is needed for buggy hardware (uc101) where\r\n\t\tno pull down resistor is connected to the signal IDE5V_DD7.\r\n\r\n- vxWorks boot parameters:\r\n\r\n\t\tbootvx constructs a valid bootline using the following\r\n\t\tenvironments variables: bootfile, ipaddr, serverip, hostname.\r\n\t\tIt loads the vxWorks image pointed bootfile.\r\n\r\n\t\tCONFIG_SYS_VXWORKS_BOOT_DEVICE - The vxworks device name\r\n\t\tCONFIG_SYS_VXWORKS_MAC_PTR - Ethernet 6 byte MA -address\r\n\t\tCONFIG_SYS_VXWORKS_SERVERNAME - Name of the server\r\n\t\tCONFIG_SYS_VXWORKS_BOOT_ADDR - Address of boot parameters\r\n\r\n\t\tCONFIG_SYS_VXWORKS_ADD_PARAMS\r\n\r\n\t\tAdd it at the end of the bootline. E.g \"u=username pw=secret\"\r\n\r\n\t\tNote: If a \"bootargs\" environment is defined, it will overwride\r\n\t\tthe defaults discussed just above.\r\n\r\n- Serial Ports:\r\n\t\tCONFIG_PL010_SERIAL\r\n\r\n\t\tDefine this if you want support for Amba PrimeCell PL010 UARTs.\r\n\r\n\t\tCONFIG_PL011_SERIAL\r\n\r\n\t\tDefine this if you want support for Amba PrimeCell PL011 UARTs.\r\n\r\n\t\tCONFIG_PL011_CLOCK\r\n\r\n\t\tIf you have Amba PrimeCell PL011 UARTs, set this variable to\r\n\t\tthe clock speed of the UARTs.\r\n\r\n\t\tCONFIG_PL01x_PORTS\r\n\r\n\t\tIf you have Amba PrimeCell PL010 or PL011 UARTs on your board,\r\n\t\tdefine this to a list of base addresses for each (supported)\r\n\t\tport. See e.g. include/configs/versatile.h\r\n\r\n\t\tCONFIG_PL011_SERIAL_RLCR\r\n\r\n\t\tSome vendor versions of PL011 serial ports (e.g. ST-Ericsson U8500)\r\n\t\thave separate receive and transmit line control registers.  Set\r\n\t\tthis variable to initialize the extra register.\r\n\r\n\t\tCONFIG_PL011_SERIAL_FLUSH_ON_INIT\r\n\r\n\t\tOn some platforms (e.g. U8500) U-Boot is loaded by a second stage\r\n\t\tboot loader that has already initialized the UART.  Define this\r\n\t\tvariable to flush the UART at init time.\r\n\r\n\r\n- Console Interface:\r\n\t\tDepending on board, define exactly one serial port\r\n\t\t(like CONFIG_8xx_CONS_SMC1, CONFIG_8xx_CONS_SMC2,\r\n\t\tCONFIG_8xx_CONS_SCC1, ...), or switch off the serial\r\n\t\tconsole by defining CONFIG_8xx_CONS_NONE\r\n\r\n\t\tNote: if CONFIG_8xx_CONS_NONE is defined, the serial\r\n\t\tport routines must be defined elsewhere\r\n\t\t(i.e. serial_init(), serial_getc(), ...)\r\n\r\n\t\tCONFIG_CFB_CONSOLE\r\n\t\tEnables console device for a color framebuffer. Needs following\r\n\t\tdefines (cf. smiLynxEM, i8042, board/eltec/bab7xx)\r\n\t\t\tVIDEO_FB_LITTLE_ENDIAN\tgraphic memory organisation\r\n\t\t\t\t\t\t(default big endian)\r\n\t\t\tVIDEO_HW_RECTFILL\tgraphic chip supports\r\n\t\t\t\t\t\trectangle fill\r\n\t\t\t\t\t\t(cf. smiLynxEM)\r\n\t\t\tVIDEO_HW_BITBLT\t\tgraphic chip supports\r\n\t\t\t\t\t\tbit-blit (cf. smiLynxEM)\r\n\t\t\tVIDEO_VISIBLE_COLS\tvisible pixel columns\r\n\t\t\t\t\t\t(cols=pitch)\r\n\t\t\tVIDEO_VISIBLE_ROWS\tvisible pixel rows\r\n\t\t\tVIDEO_PIXEL_SIZE\tbytes per pixel\r\n\t\t\tVIDEO_DATA_FORMAT\tgraphic data format\r\n\t\t\t\t\t\t(0-5, cf. cfb_console.c)\r\n\t\t\tVIDEO_FB_ADRS\t\tframebuffer address\r\n\t\t\tVIDEO_KBD_INIT_FCT\tkeyboard int fct\r\n\t\t\t\t\t\t(i.e. i8042_kbd_init())\r\n\t\t\tVIDEO_TSTC_FCT\t\ttest char fct\r\n\t\t\t\t\t\t(i.e. i8042_tstc)\r\n\t\t\tVIDEO_GETC_FCT\t\tget char fct\r\n\t\t\t\t\t\t(i.e. i8042_getc)\r\n\t\t\tCONFIG_CONSOLE_CURSOR\tcursor drawing on/off\r\n\t\t\t\t\t\t(requires blink timer\r\n\t\t\t\t\t\tcf. i8042.c)\r\n\t\t\tCONFIG_SYS_CONSOLE_BLINK_COUNT blink interval (cf. i8042.c)\r\n\t\t\tCONFIG_CONSOLE_TIME\tdisplay time/date info in\r\n\t\t\t\t\t\tupper right corner\r\n\t\t\t\t\t\t(requires CONFIG_CMD_DATE)\r\n\t\t\tCONFIG_VIDEO_LOGO\tdisplay Linux logo in\r\n\t\t\t\t\t\tupper left corner\r\n\t\t\tCONFIG_VIDEO_BMP_LOGO\tuse bmp_logo.h instead of\r\n\t\t\t\t\t\tlinux_logo.h for logo.\r\n\t\t\t\t\t\tRequires CONFIG_VIDEO_LOGO\r\n\t\t\tCONFIG_CONSOLE_EXTRA_INFO\r\n\t\t\t\t\t\tadditional board info beside\r\n\t\t\t\t\t\tthe logo\r\n\r\n\t\tWhen CONFIG_CFB_CONSOLE is defined, video console is\r\n\t\tdefault i/o. Serial console can be forced with\r\n\t\tenvironment 'console=serial'.\r\n\r\n\t\tWhen CONFIG_SILENT_CONSOLE is defined, all console\r\n\t\tmessages (by U-Boot and Linux!) can be silenced with\r\n\t\tthe \"silent\" environment variable. See\r\n\t\tdoc/README.silent for more information.\r\n\r\n- Console Baudrate:\r\n\t\tCONFIG_BAUDRATE - in bps\r\n\t\tSelect one of the baudrates listed in\r\n\t\tCONFIG_SYS_BAUDRATE_TABLE, see below.\r\n\t\tCONFIG_SYS_BRGCLK_PRESCALE, baudrate prescale\r\n\r\n- Console Rx buffer length\r\n\t\tWith CONFIG_SYS_SMC_RXBUFLEN it is possible to define\r\n\t\tthe maximum receive buffer length for the SMC.\r\n\t\tThis option is actual only for 82xx and 8xx possible.\r\n\t\tIf using CONFIG_SYS_SMC_RXBUFLEN also CONFIG_SYS_MAXIDLE\r\n\t\tmust be defined, to setup the maximum idle timeout for\r\n\t\tthe SMC.\r\n\r\n- Boot Delay:\tCONFIG_BOOTDELAY - in seconds\r\n\t\tDelay before automatically booting the default image;\r\n\t\tset to -1 to disable autoboot.\r\n\r\n\t\tSee doc/README.autoboot for these options that\r\n\t\twork with CONFIG_BOOTDELAY. None are required.\r\n\t\tCONFIG_BOOT_RETRY_TIME\r\n\t\tCONFIG_BOOT_RETRY_MIN\r\n\t\tCONFIG_AUTOBOOT_KEYED\r\n\t\tCONFIG_AUTOBOOT_PROMPT\r\n\t\tCONFIG_AUTOBOOT_DELAY_STR\r\n\t\tCONFIG_AUTOBOOT_STOP_STR\r\n\t\tCONFIG_AUTOBOOT_DELAY_STR2\r\n\t\tCONFIG_AUTOBOOT_STOP_STR2\r\n\t\tCONFIG_ZERO_BOOTDELAY_CHECK\r\n\t\tCONFIG_RESET_TO_RETRY\r\n\r\n- Autoboot Command:\r\n\t\tCONFIG_BOOTCOMMAND\r\n\t\tOnly needed when CONFIG_BOOTDELAY is enabled;\r\n\t\tdefine a command string that is automatically executed\r\n\t\twhen no character is read on the console interface\r\n\t\twithin \"Boot Delay\" after reset.\r\n\r\n\t\tCONFIG_BOOTARGS\r\n\t\tThis can be used to pass arguments to the bootm\r\n\t\tcommand. The value of CONFIG_BOOTARGS goes into the\r\n\t\tenvironment value \"bootargs\".\r\n\r\n\t\tCONFIG_RAMBOOT and CONFIG_NFSBOOT\r\n\t\tThe value of these goes into the environment as\r\n\t\t\"ramboot\" and \"nfsboot\" respectively, and can be used\r\n\t\tas a convenience, when switching between booting from\r\n\t\tRAM and NFS.\r\n\r\n- Pre-Boot Commands:\r\n\t\tCONFIG_PREBOOT\r\n\r\n\t\tWhen this option is #defined, the existence of the\r\n\t\tenvironment variable \"preboot\" will be checked\r\n\t\timmediately before starting the CONFIG_BOOTDELAY\r\n\t\tcountdown and/or running the auto-boot command resp.\r\n\t\tentering interactive mode.\r\n\r\n\t\tThis feature is especially useful when \"preboot\" is\r\n\t\tautomatically generated or modified. For an example\r\n\t\tsee the LWMON board specific code: here \"preboot\" is\r\n\t\tmodified when the user holds down a certain\r\n\t\tcombination of keys on the (special) keyboard when\r\n\t\tbooting the systems\r\n\r\n- Serial Download Echo Mode:\r\n\t\tCONFIG_LOADS_ECHO\r\n\t\tIf defined to 1, all characters received during a\r\n\t\tserial download (using the \"loads\" command) are\r\n\t\techoed back. This might be needed by some terminal\r\n\t\temulations (like \"cu\"), but may as well just take\r\n\t\ttime on others. This setting #define's the initial\r\n\t\tvalue of the \"loads_echo\" environment variable.\r\n\r\n- Kgdb Serial Baudrate: (if CONFIG_CMD_KGDB is defined)\r\n\t\tCONFIG_KGDB_BAUDRATE\r\n\t\tSelect one of the baudrates listed in\r\n\t\tCONFIG_SYS_BAUDRATE_TABLE, see below.\r\n\r\n- Monitor Functions:\r\n\t\tMonitor commands can be included or excluded\r\n\t\tfrom the build by using the #include files\r\n\t\t\"config_cmd_all.h\" and #undef'ing unwanted\r\n\t\tcommands, or using \"config_cmd_default.h\"\r\n\t\tand augmenting with additional #define's\r\n\t\tfor wanted commands.\r\n\r\n\t\tThe default command configuration includes all commands\r\n\t\texcept those marked below with a \"*\".\r\n\r\n\t\tCONFIG_CMD_ASKENV\t* ask for env variable\r\n\t\tCONFIG_CMD_BDI\t\t  bdinfo\r\n\t\tCONFIG_CMD_BEDBUG\t* Include BedBug Debugger\r\n\t\tCONFIG_CMD_BMP\t\t* BMP support\r\n\t\tCONFIG_CMD_BSP\t\t* Board specific commands\r\n\t\tCONFIG_CMD_BOOTD\t  bootd\r\n\t\tCONFIG_CMD_CACHE\t* icache, dcache\r\n\t\tCONFIG_CMD_CONSOLE\t  coninfo\r\n\t\tCONFIG_CMD_CRC32\t* crc32\r\n\t\tCONFIG_CMD_DATE\t\t* support for RTC, date/time...\r\n\t\tCONFIG_CMD_DHCP\t\t* DHCP support\r\n\t\tCONFIG_CMD_DIAG\t\t* Diagnostics\r\n\t\tCONFIG_CMD_DS4510\t* ds4510 I2C gpio commands\r\n\t\tCONFIG_CMD_DS4510_INFO\t* ds4510 I2C info command\r\n\t\tCONFIG_CMD_DS4510_MEM\t* ds4510 I2C eeprom/sram commansd\r\n\t\tCONFIG_CMD_DS4510_RST\t* ds4510 I2C rst command\r\n\t\tCONFIG_CMD_DTT\t\t* Digital Therm and Thermostat\r\n\t\tCONFIG_CMD_ECHO\t\t  echo arguments\r\n\t\tCONFIG_CMD_EDITENV\t  edit env variable\r\n\t\tCONFIG_CMD_EEPROM\t* EEPROM read/write support\r\n\t\tCONFIG_CMD_ELF\t\t* bootelf, bootvx\r\n\t\tCONFIG_CMD_EXPORTENV\t* export the environment\r\n\t\tCONFIG_CMD_SAVEENV\t  saveenv\r\n\t\tCONFIG_CMD_FDC\t\t* Floppy Disk Support\r\n\t\tCONFIG_CMD_FAT\t\t* FAT partition support\r\n\t\tCONFIG_CMD_FDOS\t\t* Dos diskette Support\r\n\t\tCONFIG_CMD_FLASH\t  flinfo, erase, protect\r\n\t\tCONFIG_CMD_FPGA\t\t  FPGA device initialization support\r\n\t\tCONFIG_CMD_GO\t\t* the 'go' command (exec code)\r\n\t\tCONFIG_CMD_GREPENV\t* search environment\r\n\t\tCONFIG_CMD_HWFLOW\t* RTS/CTS hw flow control\r\n\t\tCONFIG_CMD_I2C\t\t* I2C serial bus support\r\n\t\tCONFIG_CMD_IDE\t\t* IDE harddisk support\r\n\t\tCONFIG_CMD_IMI\t\t  iminfo\r\n\t\tCONFIG_CMD_IMLS\t\t  List all found images\r\n\t\tCONFIG_CMD_IMMAP\t* IMMR dump support\r\n\t\tCONFIG_CMD_IMPORTENV\t* import an environment\r\n\t\tCONFIG_CMD_IRQ\t\t* irqinfo\r\n\t\tCONFIG_CMD_ITEST\t  Integer/string test of 2 values\r\n\t\tCONFIG_CMD_JFFS2\t* JFFS2 Support\r\n\t\tCONFIG_CMD_KGDB\t\t* kgdb\r\n\t\tCONFIG_CMD_LDRINFO\t  ldrinfo (display Blackfin loader)\r\n\t\tCONFIG_CMD_LOADB\t  loadb\r\n\t\tCONFIG_CMD_LOADS\t  loads\r\n\t\tCONFIG_CMD_MD5SUM\t  print md5 message digest\r\n\t\t\t\t\t  (requires CONFIG_CMD_MEMORY and CONFIG_MD5)\r\n\t\tCONFIG_CMD_MEMORY\t  md, mm, nm, mw, cp, cmp, crc, base,\r\n\t\t\t\t\t  loop, loopw, mtest\r\n\t\tCONFIG_CMD_MISC\t\t  Misc functions like sleep etc\r\n\t\tCONFIG_CMD_MMC\t\t* MMC memory mapped support\r\n\t\tCONFIG_CMD_MII\t\t* MII utility commands\r\n\t\tCONFIG_CMD_MTDPARTS\t* MTD partition support\r\n\t\tCONFIG_CMD_NAND\t\t* NAND support\r\n\t\tCONFIG_CMD_NET\t\t  bootp, tftpboot, rarpboot\r\n\t\tCONFIG_CMD_PCA953X\t* PCA953x I2C gpio commands\r\n\t\tCONFIG_CMD_PCA953X_INFO\t* PCA953x I2C gpio info command\r\n\t\tCONFIG_CMD_PCI\t\t* pciinfo\r\n\t\tCONFIG_CMD_PCMCIA\t\t* PCMCIA support\r\n\t\tCONFIG_CMD_PING\t\t* send ICMP ECHO_REQUEST to network\r\n\t\t\t\t\t  host\r\n\t\tCONFIG_CMD_PORTIO\t* Port I/O\r\n\t\tCONFIG_CMD_REGINFO\t* Register dump\r\n\t\tCONFIG_CMD_RUN\t\t  run command in env variable\r\n\t\tCONFIG_CMD_SAVES\t* save S record dump\r\n\t\tCONFIG_CMD_SCSI\t\t* SCSI Support\r\n\t\tCONFIG_CMD_SDRAM\t* print SDRAM configuration information\r\n\t\t\t\t\t  (requires CONFIG_CMD_I2C)\r\n\t\tCONFIG_CMD_SETGETDCR\t  Support for DCR Register access\r\n\t\t\t\t\t  (4xx only)\r\n\t\tCONFIG_CMD_SHA1SUM\t  print sha1 memory digest\r\n\t\t\t\t\t  (requires CONFIG_CMD_MEMORY)\r\n\t\tCONFIG_CMD_SOURCE\t  \"source\" command Support\r\n\t\tCONFIG_CMD_SPI\t\t* SPI serial bus support\r\n\t\tCONFIG_CMD_TFTPSRV\t* TFTP transfer in server mode\r\n\t\tCONFIG_CMD_USB\t\t* USB support\r\n\t\tCONFIG_CMD_CDP\t\t* Cisco Discover Protocol support\r\n\t\tCONFIG_CMD_FSL\t\t* Microblaze FSL support\r\n\r\n\r\n\t\tEXAMPLE: If you want all functions except of network\r\n\t\tsupport you can write:\r\n\r\n\t\t#include \"config_cmd_all.h\"\r\n\t\t#undef CONFIG_CMD_NET\r\n\r\n\tOther Commands:\r\n\t\tfdt (flattened device tree) command: CONFIG_OF_LIBFDT\r\n\r\n\tNote:\tDon't enable the \"icache\" and \"dcache\" commands\r\n\t\t(configuration option CONFIG_CMD_CACHE) unless you know\r\n\t\twhat you (and your U-Boot users) are doing. Data\r\n\t\tcache cannot be enabled on systems like the 8xx or\r\n\t\t8260 (where accesses to the IMMR region must be\r\n\t\tuncached), and it cannot be disabled on all other\r\n\t\tsystems where we (mis-) use the data cache to hold an\r\n\t\tinitial stack and some data.\r\n\r\n\r\n\t\tXXX - this list needs to get updated!\r\n\r\n- Watchdog:\r\n\t\tCONFIG_WATCHDOG\r\n\t\tIf this variable is defined, it enables watchdog\r\n\t\tsupport for the SoC. There must be support in the SoC\r\n\t\tspecific code for a watchdog. For the 8xx and 8260\r\n\t\tCPUs, the SIU Watchdog feature is enabled in the SYPCR\r\n\t\tregister.  When supported for a specific SoC is\r\n\t\tavailable, then no further board specific code should\r\n\t\tbe needed to use it.\r\n\r\n\t\tCONFIG_HW_WATCHDOG\r\n\t\tWhen using a watchdog circuitry external to the used\r\n\t\tSoC, then define this variable and provide board\r\n\t\tspecific code for the \"hw_watchdog_reset\" function.\r\n\r\n- U-Boot Version:\r\n\t\tCONFIG_VERSION_VARIABLE\r\n\t\tIf this variable is defined, an environment variable\r\n\t\tnamed \"ver\" is created by U-Boot showing the U-Boot\r\n\t\tversion as printed by the \"version\" command.\r\n\t\tThis variable is readonly.\r\n\r\n- Real-Time Clock:\r\n\r\n\t\tWhen CONFIG_CMD_DATE is selected, the type of the RTC\r\n\t\thas to be selected, too. Define exactly one of the\r\n\t\tfollowing options:\r\n\r\n\t\tCONFIG_RTC_MPC8xx\t- use internal RTC of MPC8xx\r\n\t\tCONFIG_RTC_PCF8563\t- use Philips PCF8563 RTC\r\n\t\tCONFIG_RTC_MC13783\t- use MC13783 RTC\r\n\t\tCONFIG_RTC_MC146818\t- use MC146818 RTC\r\n\t\tCONFIG_RTC_DS1307\t- use Maxim, Inc. DS1307 RTC\r\n\t\tCONFIG_RTC_DS1337\t- use Maxim, Inc. DS1337 RTC\r\n\t\tCONFIG_RTC_DS1338\t- use Maxim, Inc. DS1338 RTC\r\n\t\tCONFIG_RTC_DS164x\t- use Dallas DS164x RTC\r\n\t\tCONFIG_RTC_ISL1208\t- use Intersil ISL1208 RTC\r\n\t\tCONFIG_RTC_MAX6900\t- use Maxim, Inc. MAX6900 RTC\r\n\t\tCONFIG_SYS_RTC_DS1337_NOOSC\t- Turn off the OSC output for DS1337\r\n\t\tCONFIG_SYS_RV3029_TCR\t- enable trickle charger on\r\n\t\t\t\t\t  RV3029 RTC.\r\n\r\n\t\tNote that if the RTC uses I2C, then the I2C interface\r\n\t\tmust also be configured. See I2C Support, below.\r\n\r\n- GPIO Support:\r\n\t\tCONFIG_PCA953X\t\t- use NXP's PCA953X series I2C GPIO\r\n\t\tCONFIG_PCA953X_INFO\t- enable pca953x info command\r\n\r\n\t\tThe CONFIG_SYS_I2C_PCA953X_WIDTH option specifies a list of\r\n\t\tchip-ngpio pairs that tell the PCA953X driver the number of\r\n\t\tpins supported by a particular chip.\r\n\r\n\t\tNote that if the GPIO device uses I2C, then the I2C interface\r\n\t\tmust also be configured. See I2C Support, below.\r\n\r\n- Timestamp Support:\r\n\r\n\t\tWhen CONFIG_TIMESTAMP is selected, the timestamp\r\n\t\t(date and time) of an image is printed by image\r\n\t\tcommands like bootm or iminfo. This option is\r\n\t\tautomatically enabled when you select CONFIG_CMD_DATE .\r\n\r\n- Partition Support:\r\n\t\tCONFIG_MAC_PARTITION and/or CONFIG_DOS_PARTITION\r\n\t\tand/or CONFIG_ISO_PARTITION and/or CONFIG_EFI_PARTITION\r\n\r\n\t\tIf IDE or SCSI support is enabled (CONFIG_CMD_IDE or\r\n\t\tCONFIG_CMD_SCSI) you must configure support for at\r\n\t\tleast one partition type as well.\r\n\r\n- IDE Reset method:\r\n\t\tCONFIG_IDE_RESET_ROUTINE - this is defined in several\r\n\t\tboard configurations files but used nowhere!\r\n\r\n\t\tCONFIG_IDE_RESET - is this is defined, IDE Reset will\r\n\t\tbe performed by calling the function\r\n\t\t\tide_set_reset(int reset)\r\n\t\twhich has to be defined in a board specific file\r\n\r\n- ATAPI Support:\r\n\t\tCONFIG_ATAPI\r\n\r\n\t\tSet this to enable ATAPI support.\r\n\r\n- LBA48 Support\r\n\t\tCONFIG_LBA48\r\n\r\n\t\tSet this to enable support for disks larger than 137GB\r\n\t\tAlso look at CONFIG_SYS_64BIT_LBA.\r\n\t\tWhithout these , LBA48 support uses 32bit variables and will 'only'\r\n\t\tsupport disks up to 2.1TB.\r\n\r\n\t\tCONFIG_SYS_64BIT_LBA:\r\n\t\t\tWhen enabled, makes the IDE subsystem use 64bit sector addresses.\r\n\t\t\tDefault is 32bit.\r\n\r\n- SCSI Support:\r\n\t\tAt the moment only there is only support for the\r\n\t\tSYM53C8XX SCSI controller; define\r\n\t\tCONFIG_SCSI_SYM53C8XX to enable it.\r\n\r\n\t\tCONFIG_SYS_SCSI_MAX_LUN [8], CONFIG_SYS_SCSI_MAX_SCSI_ID [7] and\r\n\t\tCONFIG_SYS_SCSI_MAX_DEVICE [CONFIG_SYS_SCSI_MAX_SCSI_ID *\r\n\t\tCONFIG_SYS_SCSI_MAX_LUN] can be adjusted to define the\r\n\t\tmaximum numbers of LUNs, SCSI ID's and target\r\n\t\tdevices.\r\n\t\tCONFIG_SYS_SCSI_SYM53C8XX_CCF to fix clock timing (80Mhz)\r\n\r\n- NETWORK Support (PCI):\r\n\t\tCONFIG_E1000\r\n\t\tSupport for Intel 8254x gigabit chips.\r\n\r\n\t\tCONFIG_E1000_FALLBACK_MAC\r\n\t\tdefault MAC for empty EEPROM after production.\r\n\r\n\t\tCONFIG_EEPRO100\r\n\t\tSupport for Intel 82557/82559/82559ER chips.\r\n\t\tOptional CONFIG_EEPRO100_SROM_WRITE enables EEPROM\r\n\t\twrite routine for first time initialisation.\r\n\r\n\t\tCONFIG_TULIP\r\n\t\tSupport for Digital 2114x chips.\r\n\t\tOptional CONFIG_TULIP_SELECT_MEDIA for board specific\r\n\t\tmodem chip initialisation (KS8761/QS6611).\r\n\r\n\t\tCONFIG_NATSEMI\r\n\t\tSupport for National dp83815 chips.\r\n\r\n\t\tCONFIG_NS8382X\r\n\t\tSupport for National dp8382[01] gigabit chips.\r\n\r\n- NETWORK Support (other):\r\n\r\n\t\tCONFIG_DRIVER_AT91EMAC\r\n\t\tSupport for AT91RM9200 EMAC.\r\n\r\n\t\t\tCONFIG_RMII\r\n\t\t\tDefine this to use reduced MII inteface\r\n\r\n\t\t\tCONFIG_DRIVER_AT91EMAC_QUIET\r\n\t\t\tIf this defined, the driver is quiet.\r\n\t\t\tThe driver doen't show link status messages.\r\n\r\n\t\tCONFIG_DRIVER_LAN91C96\r\n\t\tSupport for SMSC's LAN91C96 chips.\r\n\r\n\t\t\tCONFIG_LAN91C96_BASE\r\n\t\t\tDefine this to hold the physical address\r\n\t\t\tof the LAN91C96's I/O space\r\n\r\n\t\t\tCONFIG_LAN91C96_USE_32_BIT\r\n\t\t\tDefine this to enable 32 bit addressing\r\n\r\n\t\tCONFIG_DRIVER_SMC91111\r\n\t\tSupport for SMSC's LAN91C111 chip\r\n\r\n\t\t\tCONFIG_SMC91111_BASE\r\n\t\t\tDefine this to hold the physical address\r\n\t\t\tof the device (I/O space)\r\n\r\n\t\t\tCONFIG_SMC_USE_32_BIT\r\n\t\t\tDefine this if data bus is 32 bits\r\n\r\n\t\t\tCONFIG_SMC_USE_IOFUNCS\r\n\t\t\tDefine this to use i/o functions instead of macros\r\n\t\t\t(some hardware wont work with macros)\r\n\r\n\t\tCONFIG_FTGMAC100\r\n\t\tSupport for Faraday's FTGMAC100 Gigabit SoC Ethernet\r\n\r\n\t\t\tCONFIG_FTGMAC100_EGIGA\r\n\t\t\tDefine this to use GE link update with gigabit PHY.\r\n\t\t\tDefine this if FTGMAC100 is connected to gigabit PHY.\r\n\t\t\tIf your system has 10/100 PHY only, it might not occur\r\n\t\t\twrong behavior. Because PHY usually return timeout or\r\n\t\t\tuseless data when polling gigabit status and gigabit\r\n\t\t\tcontrol registers. This behavior won't affect the\r\n\t\t\tcorrectnessof 10/100 link speed update.\r\n\r\n\t\tCONFIG_SMC911X\r\n\t\tSupport for SMSC's LAN911x and LAN921x chips\r\n\r\n\t\t\tCONFIG_SMC911X_BASE\r\n\t\t\tDefine this to hold the physical address\r\n\t\t\tof the device (I/O space)\r\n\r\n\t\t\tCONFIG_SMC911X_32_BIT\r\n\t\t\tDefine this if data bus is 32 bits\r\n\r\n\t\t\tCONFIG_SMC911X_16_BIT\r\n\t\t\tDefine this if data bus is 16 bits. If your processor\r\n\t\t\tautomatically converts one 32 bit word to two 16 bit\r\n\t\t\twords you may also try CONFIG_SMC911X_32_BIT.\r\n\r\n\t\tCONFIG_SH_ETHER\r\n\t\tSupport for Renesas on-chip Ethernet controller\r\n\r\n\t\t\tCONFIG_SH_ETHER_USE_PORT\r\n\t\t\tDefine the number of ports to be used\r\n\r\n\t\t\tCONFIG_SH_ETHER_PHY_ADDR\r\n\t\t\tDefine the ETH PHY's address\r\n\r\n\t\t\tCONFIG_SH_ETHER_CACHE_WRITEBACK\r\n\t\t\tIf this option is set, the driver enables cache flush.\r\n\r\n- USB Support:\r\n\t\tAt the moment only the UHCI host controller is\r\n\t\tsupported (PIP405, MIP405, MPC5200); define\r\n\t\tCONFIG_USB_UHCI to enable it.\r\n\t\tdefine CONFIG_USB_KEYBOARD to enable the USB Keyboard\r\n\t\tand define CONFIG_USB_STORAGE to enable the USB\r\n\t\tstorage devices.\r\n\t\tNote:\r\n\t\tSupported are USB Keyboards and USB Floppy drives\r\n\t\t(TEAC FD-05PUB).\r\n\t\tMPC5200 USB requires additional defines:\r\n\t\t\tCONFIG_USB_CLOCK\r\n\t\t\t\tfor 528 MHz Clock: 0x0001bbbb\r\n\t\t\tCONFIG_PSC3_USB\r\n\t\t\t\tfor USB on PSC3\r\n\t\t\tCONFIG_USB_CONFIG\r\n\t\t\t\tfor differential drivers: 0x00001000\r\n\t\t\t\tfor single ended drivers: 0x00005000\r\n\t\t\t\tfor differential drivers on PSC3: 0x00000100\r\n\t\t\t\tfor single ended drivers on PSC3: 0x00004100\r\n\t\t\tCONFIG_SYS_USB_EVENT_POLL\r\n\t\t\t\tMay be defined to allow interrupt polling\r\n\t\t\t\tinstead of using asynchronous interrupts\r\n\r\n- USB Device:\r\n\t\tDefine the below if you wish to use the USB console.\r\n\t\tOnce firmware is rebuilt from a serial console issue the\r\n\t\tcommand \"setenv stdin usbtty; setenv stdout usbtty\" and\r\n\t\tattach your USB cable. The Unix command \"dmesg\" should print\r\n\t\tit has found a new device. The environment variable usbtty\r\n\t\tcan be set to gserial or cdc_acm to enable your device to\r\n\t\tappear to a USB host as a Linux gserial device or a\r\n\t\tCommon Device Class Abstract Control Model serial device.\r\n\t\tIf you select usbtty = gserial you should be able to enumerate\r\n\t\ta Linux host by\r\n\t\t# modprobe usbserial vendor=0xVendorID product=0xProductID\r\n\t\telse if using cdc_acm, simply setting the environment\r\n\t\tvariable usbtty to be cdc_acm should suffice. The following\r\n\t\tmight be defined in YourBoardName.h\r\n\r\n\t\t\tCONFIG_USB_DEVICE\r\n\t\t\tDefine this to build a UDC device\r\n\r\n\t\t\tCONFIG_USB_TTY\r\n\t\t\tDefine this to have a tty type of device available to\r\n\t\t\ttalk to the UDC device\r\n\r\n\t\t\tCONFIG_SYS_CONSOLE_IS_IN_ENV\r\n\t\t\tDefine this if you want stdin, stdout &/or stderr to\r\n\t\t\tbe set to usbtty.\r\n\r\n\t\t\tmpc8xx:\r\n\t\t\t\tCONFIG_SYS_USB_EXTC_CLK 0xBLAH\r\n\t\t\t\tDerive USB clock from external clock \"blah\"\r\n\t\t\t\t- CONFIG_SYS_USB_EXTC_CLK 0x02\r\n\r\n\t\t\t\tCONFIG_SYS_USB_BRG_CLK 0xBLAH\r\n\t\t\t\tDerive USB clock from brgclk\r\n\t\t\t\t- CONFIG_SYS_USB_BRG_CLK 0x04\r\n\r\n\t\tIf you have a USB-IF assigned VendorID then you may wish to\r\n\t\tdefine your own vendor specific values either in BoardName.h\r\n\t\tor directly in usbd_vendor_info.h. If you don't define\r\n\t\tCONFIG_USBD_MANUFACTURER, CONFIG_USBD_PRODUCT_NAME,\r\n\t\tCONFIG_USBD_VENDORID and CONFIG_USBD_PRODUCTID, then U-Boot\r\n\t\tshould pretend to be a Linux device to it's target host.\r\n\r\n\t\t\tCONFIG_USBD_MANUFACTURER\r\n\t\t\tDefine this string as the name of your company for\r\n\t\t\t- CONFIG_USBD_MANUFACTURER \"my company\"\r\n\r\n\t\t\tCONFIG_USBD_PRODUCT_NAME\r\n\t\t\tDefine this string as the name of your product\r\n\t\t\t- CONFIG_USBD_PRODUCT_NAME \"acme usb device\"\r\n\r\n\t\t\tCONFIG_USBD_VENDORID\r\n\t\t\tDefine this as your assigned Vendor ID from the USB\r\n\t\t\tImplementors Forum. This *must* be a genuine Vendor ID\r\n\t\t\tto avoid polluting the USB namespace.\r\n\t\t\t- CONFIG_USBD_VENDORID 0xFFFF\r\n\r\n\t\t\tCONFIG_USBD_PRODUCTID\r\n\t\t\tDefine this as the unique Product ID\r\n\t\t\tfor your device\r\n\t\t\t- CONFIG_USBD_PRODUCTID 0xFFFF\r\n\r\n\r\n- MMC Support:\r\n\t\tThe MMC controller on the Intel PXA is supported. To\r\n\t\tenable this define CONFIG_MMC. The MMC can be\r\n\t\taccessed from the boot prompt by mapping the device\r\n\t\tto physical memory similar to flash. Command line is\r\n\t\tenabled with CONFIG_CMD_MMC. The MMC driver also works with\r\n\t\tthe FAT fs. This is enabled with CONFIG_CMD_FAT.\r\n\r\n- Journaling Flash filesystem support:\r\n\t\tCONFIG_JFFS2_NAND, CONFIG_JFFS2_NAND_OFF, CONFIG_JFFS2_NAND_SIZE,\r\n\t\tCONFIG_JFFS2_NAND_DEV\r\n\t\tDefine these for a default partition on a NAND device\r\n\r\n\t\tCONFIG_SYS_JFFS2_FIRST_SECTOR,\r\n\t\tCONFIG_SYS_JFFS2_FIRST_BANK, CONFIG_SYS_JFFS2_NUM_BANKS\r\n\t\tDefine these for a default partition on a NOR device\r\n\r\n\t\tCONFIG_SYS_JFFS_CUSTOM_PART\r\n\t\tDefine this to create an own partition. You have to provide a\r\n\t\tfunction struct part_info* jffs2_part_info(int part_num)\r\n\r\n\t\tIf you define only one JFFS2 partition you may also want to\r\n\t\t#define CONFIG_SYS_JFFS_SINGLE_PART\t1\r\n\t\tto disable the command chpart. This is the default when you\r\n\t\thave not defined a custom partition\r\n\r\n- Keyboard Support:\r\n\t\tCONFIG_ISA_KEYBOARD\r\n\r\n\t\tDefine this to enable standard (PC-Style) keyboard\r\n\t\tsupport\r\n\r\n\t\tCONFIG_I8042_KBD\r\n\t\tStandard PC keyboard driver with US (is default) and\r\n\t\tGERMAN key layout (switch via environment 'keymap=de') support.\r\n\t\tExport function i8042_kbd_init, i8042_tstc and i8042_getc\r\n\t\tfor cfb_console. Supports cursor blinking.\r\n\r\n- Video support:\r\n\t\tCONFIG_VIDEO\r\n\r\n\t\tDefine this to enable video support (for output to\r\n\t\tvideo).\r\n\r\n\t\tCONFIG_VIDEO_CT69000\r\n\r\n\t\tEnable Chips & Technologies 69000 Video chip\r\n\r\n\t\tCONFIG_VIDEO_SMI_LYNXEM\r\n\t\tEnable Silicon Motion SMI 712/710/810 Video chip. The\r\n\t\tvideo output is selected via environment 'videoout'\r\n\t\t(1 = LCD and 2 = CRT). If videoout is undefined, CRT is\r\n\t\tassumed.\r\n\r\n\t\tFor the CT69000 and SMI_LYNXEM drivers, videomode is\r\n\t\tselected via environment 'videomode'. Two different ways\r\n\t\tare possible:\r\n\t\t- \"videomode=num\"   'num' is a standard LiLo mode numbers.\r\n\t\tFollowing standard modes are supported\t(* is default):\r\n\r\n\t\t      Colors\t640x480 800x600 1024x768 1152x864 1280x1024\r\n\t\t-------------+---------------------------------------------\r\n\t\t      8 bits |\t0x301*\t0x303\t 0x305\t  0x161\t    0x307\r\n\t\t     15 bits |\t0x310\t0x313\t 0x316\t  0x162\t    0x319\r\n\t\t     16 bits |\t0x311\t0x314\t 0x317\t  0x163\t    0x31A\r\n\t\t     24 bits |\t0x312\t0x315\t 0x318\t    ?\t    0x31B\r\n\t\t-------------+---------------------------------------------\r\n\t\t(i.e. setenv videomode 317; saveenv; reset;)\r\n\r\n\t\t- \"videomode=bootargs\" all the video parameters are parsed\r\n\t\tfrom the bootargs. (See drivers/video/videomodes.c)\r\n\r\n\r\n\t\tCONFIG_VIDEO_SED13806\r\n\t\tEnable Epson SED13806 driver. This driver supports 8bpp\r\n\t\tand 16bpp modes defined by CONFIG_VIDEO_SED13806_8BPP\r\n\t\tor CONFIG_VIDEO_SED13806_16BPP\r\n\r\n\t\tCONFIG_FSL_DIU_FB\r\n\t\tEnable the Freescale DIU video driver.  Reference boards for\r\n\t\tSOCs that have a DIU should define this macro to enable DIU\r\n\t\tsupport, and should also define these other macros:\r\n\r\n\t\t\tCONFIG_SYS_DIU_ADDR\r\n\t\t\tCONFIG_VIDEO\r\n\t\t\tCONFIG_CMD_BMP\r\n\t\t\tCONFIG_CFB_CONSOLE\r\n\t\t\tCONFIG_VIDEO_SW_CURSOR\r\n\t\t\tCONFIG_VGA_AS_SINGLE_DEVICE\r\n\t\t\tCONFIG_VIDEO_LOGO\r\n\t\t\tCONFIG_VIDEO_BMP_LOGO\r\n\r\n\t\tThe DIU driver will look for the 'video-mode' environment\r\n\t\tvariable, and if defined, enable the DIU as a console during\r\n\t\tboot.  See the documentation file README.video for a\r\n\t\tdescription of this variable.\r\n\r\n- Keyboard Support:\r\n\t\tCONFIG_KEYBOARD\r\n\r\n\t\tDefine this to enable a custom keyboard support.\r\n\t\tThis simply calls drv_keyboard_init() which must be\r\n\t\tdefined in your board-specific files.\r\n\t\tThe only board using this so far is RBC823.\r\n\r\n- LCD Support:\tCONFIG_LCD\r\n\r\n\t\tDefine this to enable LCD support (for output to LCD\r\n\t\tdisplay); also select one of the supported displays\r\n\t\tby defining one of these:\r\n\r\n\t\tCONFIG_ATMEL_LCD:\r\n\r\n\t\t\tHITACHI TX09D70VM1CCA, 3.5\", 240x320.\r\n\r\n\t\tCONFIG_NEC_NL6448AC33:\r\n\r\n\t\t\tNEC NL6448AC33-18. Active, color, single scan.\r\n\r\n\t\tCONFIG_NEC_NL6448BC20\r\n\r\n\t\t\tNEC NL6448BC20-08. 6.5\", 640x480.\r\n\t\t\tActive, color, single scan.\r\n\r\n\t\tCONFIG_NEC_NL6448BC33_54\r\n\r\n\t\t\tNEC NL6448BC33-54. 10.4\", 640x480.\r\n\t\t\tActive, color, single scan.\r\n\r\n\t\tCONFIG_SHARP_16x9\r\n\r\n\t\t\tSharp 320x240. Active, color, single scan.\r\n\t\t\tIt isn't 16x9, and I am not sure what it is.\r\n\r\n\t\tCONFIG_SHARP_LQ64D341\r\n\r\n\t\t\tSharp LQ64D341 display, 640x480.\r\n\t\t\tActive, color, single scan.\r\n\r\n\t\tCONFIG_HLD1045\r\n\r\n\t\t\tHLD1045 display, 640x480.\r\n\t\t\tActive, color, single scan.\r\n\r\n\t\tCONFIG_OPTREX_BW\r\n\r\n\t\t\tOptrex\t CBL50840-2 NF-FW 99 22 M5\r\n\t\t\tor\r\n\t\t\tHitachi\t LMG6912RPFC-00T\r\n\t\t\tor\r\n\t\t\tHitachi\t SP14Q002\r\n\r\n\t\t\t320x240. Black & white.\r\n\r\n\t\tNormally display is black on white background; define\r\n\t\tCONFIG_SYS_WHITE_ON_BLACK to get it inverted.\r\n\r\n- Splash Screen Support: CONFIG_SPLASH_SCREEN\r\n\r\n\t\tIf this option is set, the environment is checked for\r\n\t\ta variable \"splashimage\". If found, the usual display\r\n\t\tof logo, copyright and system information on the LCD\r\n\t\tis suppressed and the BMP image at the address\r\n\t\tspecified in \"splashimage\" is loaded instead. The\r\n\t\tconsole is redirected to the \"nulldev\", too. This\r\n\t\tallows for a \"silent\" boot where a splash screen is\r\n\t\tloaded very quickly after power-on.\r\n\r\n\t\tCONFIG_SPLASH_SCREEN_ALIGN\r\n\r\n\t\tIf this option is set the splash image can be freely positioned\r\n\t\ton the screen. Environment variable \"splashpos\" specifies the\r\n\t\tposition as \"x,y\". If a positive number is given it is used as\r\n\t\tnumber of pixel from left/top. If a negative number is given it\r\n\t\tis used as number of pixel from right/bottom. You can also\r\n\t\tspecify 'm' for centering the image.\r\n\r\n\t\tExample:\r\n\t\tsetenv splashpos m,m\r\n\t\t\t=> image at center of screen\r\n\r\n\t\tsetenv splashpos 30,20\r\n\t\t\t=> image at x = 30 and y = 20\r\n\r\n\t\tsetenv splashpos -10,m\r\n\t\t\t=> vertically centered image\r\n\t\t\t   at x = dspWidth - bmpWidth - 9\r\n\r\n- Gzip compressed BMP image support: CONFIG_VIDEO_BMP_GZIP\r\n\r\n\t\tIf this option is set, additionally to standard BMP\r\n\t\timages, gzipped BMP images can be displayed via the\r\n\t\tsplashscreen support or the bmp command.\r\n\r\n- Run length encoded BMP image (RLE8) support: CONFIG_VIDEO_BMP_RLE8\r\n\r\n\t\tIf this option is set, 8-bit RLE compressed BMP images\r\n\t\tcan be displayed via the splashscreen support or the\r\n\t\tbmp command.\r\n\r\n- Compression support:\r\n\t\tCONFIG_BZIP2\r\n\r\n\t\tIf this option is set, support for bzip2 compressed\r\n\t\timages is included. If not, only uncompressed and gzip\r\n\t\tcompressed images are supported.\r\n\r\n\t\tNOTE: the bzip2 algorithm requires a lot of RAM, so\r\n\t\tthe malloc area (as defined by CONFIG_SYS_MALLOC_LEN) should\r\n\t\tbe at least 4MB.\r\n\r\n\t\tCONFIG_LZMA\r\n\r\n\t\tIf this option is set, support for lzma compressed\r\n\t\timages is included.\r\n\r\n\t\tNote: The LZMA algorithm adds between 2 and 4KB of code and it\r\n\t\trequires an amount of dynamic memory that is given by the\r\n\t\tformula:\r\n\r\n\t\t\t(1846 + 768 << (lc + lp)) * sizeof(uint16)\r\n\r\n\t\tWhere lc and lp stand for, respectively, Literal context bits\r\n\t\tand Literal pos bits.\r\n\r\n\t\tThis value is upper-bounded by 14MB in the worst case. Anyway,\r\n\t\tfor a ~4MB large kernel image, we have lc=3 and lp=0 for a\r\n\t\ttotal amount of (1846 + 768 << (3 + 0)) * 2 = ~41KB... that is\r\n\t\ta very small buffer.\r\n\r\n\t\tUse the lzmainfo tool to determinate the lc and lp values and\r\n\t\tthen calculate the amount of needed dynamic memory (ensuring\r\n\t\tthe appropriate CONFIG_SYS_MALLOC_LEN value).\r\n\r\n- MII/PHY support:\r\n\t\tCONFIG_PHY_ADDR\r\n\r\n\t\tThe address of PHY on MII bus.\r\n\r\n\t\tCONFIG_PHY_CLOCK_FREQ (ppc4xx)\r\n\r\n\t\tThe clock frequency of the MII bus\r\n\r\n\t\tCONFIG_PHY_GIGE\r\n\r\n\t\tIf this option is set, support for speed/duplex\r\n\t\tdetection of gigabit PHY is included.\r\n\r\n\t\tCONFIG_PHY_RESET_DELAY\r\n\r\n\t\tSome PHY like Intel LXT971A need extra delay after\r\n\t\treset before any MII register access is possible.\r\n\t\tFor such PHY, set this option to the usec delay\r\n\t\trequired. (minimum 300usec for LXT971A)\r\n\r\n\t\tCONFIG_PHY_CMD_DELAY (ppc4xx)\r\n\r\n\t\tSome PHY like Intel LXT971A need extra delay after\r\n\t\tcommand issued before MII status register can be read\r\n\r\n- Ethernet address:\r\n\t\tCONFIG_ETHADDR\r\n\t\tCONFIG_ETH1ADDR\r\n\t\tCONFIG_ETH2ADDR\r\n\t\tCONFIG_ETH3ADDR\r\n\t\tCONFIG_ETH4ADDR\r\n\t\tCONFIG_ETH5ADDR\r\n\r\n\t\tDefine a default value for Ethernet address to use\r\n\t\tfor the respective Ethernet interface, in case this\r\n\t\tis not determined automatically.\r\n\r\n- IP address:\r\n\t\tCONFIG_IPADDR\r\n\r\n\t\tDefine a default value for the IP address to use for\r\n\t\tthe default Ethernet interface, in case this is not\r\n\t\tdetermined through e.g. bootp.\r\n\r\n- Server IP address:\r\n\t\tCONFIG_SERVERIP\r\n\r\n\t\tDefines a default value for the IP address of a TFTP\r\n\t\tserver to contact when using the \"tftboot\" command.\r\n\r\n\t\tCONFIG_KEEP_SERVERADDR\r\n\r\n\t\tKeeps the server's MAC address, in the env 'serveraddr'\r\n\t\tfor passing to bootargs (like Linux's netconsole option)\r\n\r\n- Multicast TFTP Mode:\r\n\t\tCONFIG_MCAST_TFTP\r\n\r\n\t\tDefines whether you want to support multicast TFTP as per\r\n\t\trfc-2090; for example to work with atftp.  Lets lots of targets\r\n\t\ttftp down the same boot image concurrently.  Note: the Ethernet\r\n\t\tdriver in use must provide a function: mcast() to join/leave a\r\n\t\tmulticast group.\r\n\r\n- BOOTP Recovery Mode:\r\n\t\tCONFIG_BOOTP_RANDOM_DELAY\r\n\r\n\t\tIf you have many targets in a network that try to\r\n\t\tboot using BOOTP, you may want to avoid that all\r\n\t\tsystems send out BOOTP requests at precisely the same\r\n\t\tmoment (which would happen for instance at recovery\r\n\t\tfrom a power failure, when all systems will try to\r\n\t\tboot, thus flooding the BOOTP server. Defining\r\n\t\tCONFIG_BOOTP_RANDOM_DELAY causes a random delay to be\r\n\t\tinserted before sending out BOOTP requests. The\r\n\t\tfollowing delays are inserted then:\r\n\r\n\t\t1st BOOTP request:\tdelay 0 ... 1 sec\r\n\t\t2nd BOOTP request:\tdelay 0 ... 2 sec\r\n\t\t3rd BOOTP request:\tdelay 0 ... 4 sec\r\n\t\t4th and following\r\n\t\tBOOTP requests:\t\tdelay 0 ... 8 sec\r\n\r\n- DHCP Advanced Options:\r\n\t\tYou can fine tune the DHCP functionality by defining\r\n\t\tCONFIG_BOOTP_* symbols:\r\n\r\n\t\tCONFIG_BOOTP_SUBNETMASK\r\n\t\tCONFIG_BOOTP_GATEWAY\r\n\t\tCONFIG_BOOTP_HOSTNAME\r\n\t\tCONFIG_BOOTP_NISDOMAIN\r\n\t\tCONFIG_BOOTP_BOOTPATH\r\n\t\tCONFIG_BOOTP_BOOTFILESIZE\r\n\t\tCONFIG_BOOTP_DNS\r\n\t\tCONFIG_BOOTP_DNS2\r\n\t\tCONFIG_BOOTP_SEND_HOSTNAME\r\n\t\tCONFIG_BOOTP_NTPSERVER\r\n\t\tCONFIG_BOOTP_TIMEOFFSET\r\n\t\tCONFIG_BOOTP_VENDOREX\r\n\r\n\t\tCONFIG_BOOTP_SERVERIP - TFTP server will be the serverip\r\n\t\tenvironment variable, not the BOOTP server.\r\n\r\n\t\tCONFIG_BOOTP_DNS2 - If a DHCP client requests the DNS\r\n\t\tserverip from a DHCP server, it is possible that more\r\n\t\tthan one DNS serverip is offered to the client.\r\n\t\tIf CONFIG_BOOTP_DNS2 is enabled, the secondary DNS\r\n\t\tserverip will be stored in the additional environment\r\n\t\tvariable \"dnsip2\". The first DNS serverip is always\r\n\t\tstored in the variable \"dnsip\", when CONFIG_BOOTP_DNS\r\n\t\tis defined.\r\n\r\n\t\tCONFIG_BOOTP_SEND_HOSTNAME - Some DHCP servers are capable\r\n\t\tto do a dynamic update of a DNS server. To do this, they\r\n\t\tneed the hostname of the DHCP requester.\r\n\t\tIf CONFIG_BOOTP_SEND_HOSTNAME is defined, the content\r\n\t\tof the \"hostname\" environment variable is passed as\r\n\t\toption 12 to the DHCP server.\r\n\r\n\t\tCONFIG_BOOTP_DHCP_REQUEST_DELAY\r\n\r\n\t\tA 32bit value in microseconds for a delay between\r\n\t\treceiving a \"DHCP Offer\" and sending the \"DHCP Request\".\r\n\t\tThis fixes a problem with certain DHCP servers that don't\r\n\t\trespond 100% of the time to a \"DHCP request\". E.g. On an\r\n\t\tAT91RM9200 processor running at 180MHz, this delay needed\r\n\t\tto be *at least* 15,000 usec before a Windows Server 2003\r\n\t\tDHCP server would reply 100% of the time. I recommend at\r\n\t\tleast 50,000 usec to be safe. The alternative is to hope\r\n\t\tthat one of the retries will be successful but note that\r\n\t\tthe DHCP timeout and retry process takes a longer than\r\n\t\tthis delay.\r\n\r\n - CDP Options:\r\n\t\tCONFIG_CDP_DEVICE_ID\r\n\r\n\t\tThe device id used in CDP trigger frames.\r\n\r\n\t\tCONFIG_CDP_DEVICE_ID_PREFIX\r\n\r\n\t\tA two character string which is prefixed to the MAC address\r\n\t\tof the device.\r\n\r\n\t\tCONFIG_CDP_PORT_ID\r\n\r\n\t\tA printf format string which contains the ascii name of\r\n\t\tthe port. Normally is set to \"eth%d\" which sets\r\n\t\teth0 for the first Ethernet, eth1 for the second etc.\r\n\r\n\t\tCONFIG_CDP_CAPABILITIES\r\n\r\n\t\tA 32bit integer which indicates the device capabilities;\r\n\t\t0x00000010 for a normal host which does not forwards.\r\n\r\n\t\tCONFIG_CDP_VERSION\r\n\r\n\t\tAn ascii string containing the version of the software.\r\n\r\n\t\tCONFIG_CDP_PLATFORM\r\n\r\n\t\tAn ascii string containing the name of the platform.\r\n\r\n\t\tCONFIG_CDP_TRIGGER\r\n\r\n\t\tA 32bit integer sent on the trigger.\r\n\r\n\t\tCONFIG_CDP_POWER_CONSUMPTION\r\n\r\n\t\tA 16bit integer containing the power consumption of the\r\n\t\tdevice in .1 of milliwatts.\r\n\r\n\t\tCONFIG_CDP_APPLIANCE_VLAN_TYPE\r\n\r\n\t\tA byte containing the id of the VLAN.\r\n\r\n- Status LED:\tCONFIG_STATUS_LED\r\n\r\n\t\tSeveral configurations allow to display the current\r\n\t\tstatus using a LED. For instance, the LED will blink\r\n\t\tfast while running U-Boot code, stop blinking as\r\n\t\tsoon as a reply to a BOOTP request was received, and\r\n\t\tstart blinking slow once the Linux kernel is running\r\n\t\t(supported by a status LED driver in the Linux\r\n\t\tkernel). Defining CONFIG_STATUS_LED enables this\r\n\t\tfeature in U-Boot.\r\n\r\n- CAN Support:\tCONFIG_CAN_DRIVER\r\n\r\n\t\tDefining CONFIG_CAN_DRIVER enables CAN driver support\r\n\t\ton those systems that support this (optional)\r\n\t\tfeature, like the TQM8xxL modules.\r\n\r\n- I2C Support:\tCONFIG_HARD_I2C | CONFIG_SOFT_I2C\r\n\r\n\t\tThese enable I2C serial bus commands. Defining either of\r\n\t\t(but not both of) CONFIG_HARD_I2C or CONFIG_SOFT_I2C will\r\n\t\tinclude the appropriate I2C driver for the selected CPU.\r\n\r\n\t\tThis will allow you to use i2c commands at the u-boot\r\n\t\tcommand line (as long as you set CONFIG_CMD_I2C in\r\n\t\tCONFIG_COMMANDS) and communicate with i2c based realtime\r\n\t\tclock chips. See common/cmd_i2c.c for a description of the\r\n\t\tcommand line interface.\r\n\r\n\t\tCONFIG_HARD_I2C selects a hardware I2C controller.\r\n\r\n\t\tCONFIG_SOFT_I2C configures u-boot to use a software (aka\r\n\t\tbit-banging) driver instead of CPM or similar hardware\r\n\t\tsupport for I2C.\r\n\r\n\t\tThere are several other quantities that must also be\r\n\t\tdefined when you define CONFIG_HARD_I2C or CONFIG_SOFT_I2C.\r\n\r\n\t\tIn both cases you will need to define CONFIG_SYS_I2C_SPEED\r\n\t\tto be the frequency (in Hz) at which you wish your i2c bus\r\n\t\tto run and CONFIG_SYS_I2C_SLAVE to be the address of this node (ie\r\n\t\tthe CPU's i2c node address).\r\n\r\n\t\tNow, the u-boot i2c code for the mpc8xx\r\n\t\t(arch/powerpc/cpu/mpc8xx/i2c.c) sets the CPU up as a master node\r\n\t\tand so its address should therefore be cleared to 0 (See,\r\n\t\teg, MPC823e User's Manual p.16-473). So, set\r\n\t\tCONFIG_SYS_I2C_SLAVE to 0.\r\n\r\n\t\tCONFIG_SYS_I2C_INIT_MPC5XXX\r\n\r\n\t\tWhen a board is reset during an i2c bus transfer\r\n\t\tchips might think that the current transfer is still\r\n\t\tin progress.  Reset the slave devices by sending start\r\n\t\tcommands until the slave device responds.\r\n\r\n\t\tThat's all that's required for CONFIG_HARD_I2C.\r\n\r\n\t\tIf you use the software i2c interface (CONFIG_SOFT_I2C)\r\n\t\tthen the following macros need to be defined (examples are\r\n\t\tfrom include/configs/lwmon.h):\r\n\r\n\t\tI2C_INIT\r\n\r\n\t\t(Optional). Any commands necessary to enable the I2C\r\n\t\tcontroller or configure ports.\r\n\r\n\t\teg: #define I2C_INIT (immr->im_cpm.cp_pbdir |=\tPB_SCL)\r\n\r\n\t\tI2C_PORT\r\n\r\n\t\t(Only for MPC8260 CPU). The I/O port to use (the code\r\n\t\tassumes both bits are on the same port). Valid values\r\n\t\tare 0..3 for ports A..D.\r\n\r\n\t\tI2C_ACTIVE\r\n\r\n\t\tThe code necessary to make the I2C data line active\r\n\t\t(driven).  If the data line is open collector, this\r\n\t\tdefine can be null.\r\n\r\n\t\teg: #define I2C_ACTIVE (immr->im_cpm.cp_pbdir |=  PB_SDA)\r\n\r\n\t\tI2C_TRISTATE\r\n\r\n\t\tThe code necessary to make the I2C data line tri-stated\r\n\t\t(inactive).  If the data line is open collector, this\r\n\t\tdefine can be null.\r\n\r\n\t\teg: #define I2C_TRISTATE (immr->im_cpm.cp_pbdir &= ~PB_SDA)\r\n\r\n\t\tI2C_READ\r\n\r\n\t\tCode that returns TRUE if the I2C data line is high,\r\n\t\tFALSE if it is low.\r\n\r\n\t\teg: #define I2C_READ ((immr->im_cpm.cp_pbdat & PB_SDA) != 0)\r\n\r\n\t\tI2C_SDA(bit)\r\n\r\n\t\tIf <bit> is TRUE, sets the I2C data line high. If it\r\n\t\tis FALSE, it clears it (low).\r\n\r\n\t\teg: #define I2C_SDA(bit) \\\r\n\t\t\tif(bit) immr->im_cpm.cp_pbdat |=  PB_SDA; \\\r\n\t\t\telse\timmr->im_cpm.cp_pbdat &= ~PB_SDA\r\n\r\n\t\tI2C_SCL(bit)\r\n\r\n\t\tIf <bit> is TRUE, sets the I2C clock line high. If it\r\n\t\tis FALSE, it clears it (low).\r\n\r\n\t\teg: #define I2C_SCL(bit) \\\r\n\t\t\tif(bit) immr->im_cpm.cp_pbdat |=  PB_SCL; \\\r\n\t\t\telse\timmr->im_cpm.cp_pbdat &= ~PB_SCL\r\n\r\n\t\tI2C_DELAY\r\n\r\n\t\tThis delay is invoked four times per clock cycle so this\r\n\t\tcontrols the rate of data transfer.  The data rate thus\r\n\t\tis 1 / (I2C_DELAY * 4). Often defined to be something\r\n\t\tlike:\r\n\r\n\t\t#define I2C_DELAY  udelay(2)\r\n\r\n\t\tCONFIG_SOFT_I2C_GPIO_SCL / CONFIG_SOFT_I2C_GPIO_SDA\r\n\r\n\t\tIf your arch supports the generic GPIO framework (asm/gpio.h),\r\n\t\tthen you may alternatively define the two GPIOs that are to be\r\n\t\tused as SCL / SDA.  Any of the previous I2C_xxx macros will\r\n\t\thave GPIO-based defaults assigned to them as appropriate.\r\n\r\n\t\tYou should define these to the GPIO value as given directly to\r\n\t\tthe generic GPIO functions.\r\n\r\n\t\tCONFIG_SYS_I2C_INIT_BOARD\r\n\r\n\t\tWhen a board is reset during an i2c bus transfer\r\n\t\tchips might think that the current transfer is still\r\n\t\tin progress. On some boards it is possible to access\r\n\t\tthe i2c SCLK line directly, either by using the\r\n\t\tprocessor pin as a GPIO or by having a second pin\r\n\t\tconnected to the bus. If this option is defined a\r\n\t\tcustom i2c_init_board() routine in boards/xxx/board.c\r\n\t\tis run early in the boot sequence.\r\n\r\n\t\tCONFIG_SYS_I2C_BOARD_LATE_INIT\r\n\r\n\t\tAn alternative to CONFIG_SYS_I2C_INIT_BOARD. If this option is\r\n\t\tdefined a custom i2c_board_late_init() routine in\r\n\t\tboards/xxx/board.c is run AFTER the operations in i2c_init()\r\n\t\tis completed. This callpoint can be used to unreset i2c bus\r\n\t\tusing CPU i2c controller register accesses for CPUs whose i2c\r\n\t\tcontroller provide such a method. It is called at the end of\r\n\t\ti2c_init() to allow i2c_init operations to setup the i2c bus\r\n\t\tcontroller on the CPU (e.g. setting bus speed & slave address).\r\n\r\n\t\tCONFIG_I2CFAST (PPC405GP|PPC405EP only)\r\n\r\n\t\tThis option enables configuration of bi_iic_fast[] flags\r\n\t\tin u-boot bd_info structure based on u-boot environment\r\n\t\tvariable \"i2cfast\". (see also i2cfast)\r\n\r\n\t\tCONFIG_I2C_MULTI_BUS\r\n\r\n\t\tThis option allows the use of multiple I2C buses, each of which\r\n\t\tmust have a controller.  At any point in time, only one bus is\r\n\t\tactive.  To switch to a different bus, use the 'i2c dev' command.\r\n\t\tNote that bus numbering is zero-based.\r\n\r\n\t\tCONFIG_SYS_I2C_NOPROBES\r\n\r\n\t\tThis option specifies a list of I2C devices that will be skipped\r\n\t\twhen the 'i2c probe' command is issued.  If CONFIG_I2C_MULTI_BUS\r\n\t\tis set, specify a list of bus-device pairs.  Otherwise, specify\r\n\t\ta 1D array of device addresses\r\n\r\n\t\te.g.\r\n\t\t\t#undef\tCONFIG_I2C_MULTI_BUS\r\n\t\t\t#define CONFIG_SYS_I2C_NOPROBES\t{0x50,0x68}\r\n\r\n\t\twill skip addresses 0x50 and 0x68 on a board with one I2C bus\r\n\r\n\t\t\t#define\tCONFIG_I2C_MULTI_BUS\r\n\t\t\t#define CONFIG_SYS_I2C_MULTI_NOPROBES\t{{0,0x50},{0,0x68},{1,0x54}}\r\n\r\n\t\twill skip addresses 0x50 and 0x68 on bus 0 and address 0x54 on bus 1\r\n\r\n\t\tCONFIG_SYS_SPD_BUS_NUM\r\n\r\n\t\tIf defined, then this indicates the I2C bus number for DDR SPD.\r\n\t\tIf not defined, then U-Boot assumes that SPD is on I2C bus 0.\r\n\r\n\t\tCONFIG_SYS_RTC_BUS_NUM\r\n\r\n\t\tIf defined, then this indicates the I2C bus number for the RTC.\r\n\t\tIf not defined, then U-Boot assumes that RTC is on I2C bus 0.\r\n\r\n\t\tCONFIG_SYS_DTT_BUS_NUM\r\n\r\n\t\tIf defined, then this indicates the I2C bus number for the DTT.\r\n\t\tIf not defined, then U-Boot assumes that DTT is on I2C bus 0.\r\n\r\n\t\tCONFIG_SYS_I2C_DTT_ADDR:\r\n\r\n\t\tIf defined, specifies the I2C address of the DTT device.\r\n\t\tIf not defined, then U-Boot uses predefined value for\r\n\t\tspecified DTT device.\r\n\r\n\t\tCONFIG_FSL_I2C\r\n\r\n\t\tDefine this option if you want to use Freescale's I2C driver in\r\n\t\tdrivers/i2c/fsl_i2c.c.\r\n\r\n\t\tCONFIG_I2C_MUX\r\n\r\n\t\tDefine this option if you have I2C devices reached over 1 .. n\r\n\t\tI2C Muxes like the pca9544a. This option addes a new I2C\r\n\t\tCommand \"i2c bus [muxtype:muxaddr:muxchannel]\" which adds a\r\n\t\tnew I2C Bus to the existing I2C Busses. If you select the\r\n\t\tnew Bus with \"i2c dev\", u-bbot sends first the commandos for\r\n\t\tthe muxes to activate this new \"bus\".\r\n\r\n\t\tCONFIG_I2C_MULTI_BUS must be also defined, to use this\r\n\t\tfeature!\r\n\r\n\t\tExample:\r\n\t\tAdding a new I2C Bus reached over 2 pca9544a muxes\r\n\t\t\tThe First mux with address 70 and channel 6\r\n\t\t\tThe Second mux with address 71 and channel 4\r\n\r\n\t\t=> i2c bus pca9544a:70:6:pca9544a:71:4\r\n\r\n\t\tUse the \"i2c bus\" command without parameter, to get a list\r\n\t\tof I2C Busses with muxes:\r\n\r\n\t\t=> i2c bus\r\n\t\tBusses reached over muxes:\r\n\t\tBus ID: 2\r\n\t\t  reached over Mux(es):\r\n\t\t    pca9544a@70 ch: 4\r\n\t\tBus ID: 3\r\n\t\t  reached over Mux(es):\r\n\t\t    pca9544a@70 ch: 6\r\n\t\t    pca9544a@71 ch: 4\r\n\t\t=>\r\n\r\n\t\tIf you now switch to the new I2C Bus 3 with \"i2c dev 3\"\r\n\t\tu-boot sends First the Commando to the mux@70 to enable\r\n\t\tchannel 6, and then the Commando to the mux@71 to enable\r\n\t\tthe channel 4.\r\n\r\n\t\tAfter that, you can use the \"normal\" i2c commands as\r\n\t\tusual, to communicate with your I2C devices behind\r\n\t\tthe 2 muxes.\r\n\r\n\t\tThis option is actually implemented for the bitbanging\r\n\t\talgorithm in common/soft_i2c.c and for the Hardware I2C\r\n\t\tBus on the MPC8260. But it should be not so difficult\r\n\t\tto add this option to other architectures.\r\n\r\n\t\tCONFIG_SOFT_I2C_READ_REPEATED_START\r\n\r\n\t\tdefining this will force the i2c_read() function in\r\n\t\tthe soft_i2c driver to perform an I2C repeated start\r\n\t\tbetween writing the address pointer and reading the\r\n\t\tdata.  If this define is omitted the default behaviour\r\n\t\tof doing a stop-start sequence will be used.  Most I2C\r\n\t\tdevices can use either method, but some require one or\r\n\t\tthe other.\r\n\r\n- SPI Support:\tCONFIG_SPI\r\n\r\n\t\tEnables SPI driver (so far only tested with\r\n\t\tSPI EEPROM, also an instance works with Crystal A/D and\r\n\t\tD/As on the SACSng board)\r\n\r\n\t\tCONFIG_SH_SPI\r\n\r\n\t\tEnables the driver for SPI controller on SuperH. Currently\r\n\t\tonly SH7757 is supported.\r\n\r\n\t\tCONFIG_SPI_X\r\n\r\n\t\tEnables extended (16-bit) SPI EEPROM addressing.\r\n\t\t(symmetrical to CONFIG_I2C_X)\r\n\r\n\t\tCONFIG_SOFT_SPI\r\n\r\n\t\tEnables a software (bit-bang) SPI driver rather than\r\n\t\tusing hardware support. This is a general purpose\r\n\t\tdriver that only requires three general I/O port pins\r\n\t\t(two outputs, one input) to function. If this is\r\n\t\tdefined, the board configuration must define several\r\n\t\tSPI configuration items (port pins to use, etc). For\r\n\t\tan example, see include/configs/sacsng.h.\r\n\r\n\t\tCONFIG_HARD_SPI\r\n\r\n\t\tEnables a hardware SPI driver for general-purpose reads\r\n\t\tand writes.  As with CONFIG_SOFT_SPI, the board configuration\r\n\t\tmust define a list of chip-select function pointers.\r\n\t\tCurrently supported on some MPC8xxx processors.  For an\r\n\t\texample, see include/configs/mpc8349emds.h.\r\n\r\n\t\tCONFIG_MXC_SPI\r\n\r\n\t\tEnables the driver for the SPI controllers on i.MX and MXC\r\n\t\tSoCs. Currently only i.MX31 is supported.\r\n\r\n- FPGA Support: CONFIG_FPGA\r\n\r\n\t\tEnables FPGA subsystem.\r\n\r\n\t\tCONFIG_FPGA_<vendor>\r\n\r\n\t\tEnables support for specific chip vendors.\r\n\t\t(ALTERA, XILINX)\r\n\r\n\t\tCONFIG_FPGA_<family>\r\n\r\n\t\tEnables support for FPGA family.\r\n\t\t(SPARTAN2, SPARTAN3, VIRTEX2, CYCLONE2, ACEX1K, ACEX)\r\n\r\n\t\tCONFIG_FPGA_COUNT\r\n\r\n\t\tSpecify the number of FPGA devices to support.\r\n\r\n\t\tCONFIG_SYS_FPGA_PROG_FEEDBACK\r\n\r\n\t\tEnable printing of hash marks during FPGA configuration.\r\n\r\n\t\tCONFIG_SYS_FPGA_CHECK_BUSY\r\n\r\n\t\tEnable checks on FPGA configuration interface busy\r\n\t\tstatus by the configuration function. This option\r\n\t\twill require a board or device specific function to\r\n\t\tbe written.\r\n\r\n\t\tCONFIG_FPGA_DELAY\r\n\r\n\t\tIf defined, a function that provides delays in the FPGA\r\n\t\tconfiguration driver.\r\n\r\n\t\tCONFIG_SYS_FPGA_CHECK_CTRLC\r\n\t\tAllow Control-C to interrupt FPGA configuration\r\n\r\n\t\tCONFIG_SYS_FPGA_CHECK_ERROR\r\n\r\n\t\tCheck for configuration errors during FPGA bitfile\r\n\t\tloading. For example, abort during Virtex II\r\n\t\tconfiguration if the INIT_B line goes low (which\r\n\t\tindicated a CRC error).\r\n\r\n\t\tCONFIG_SYS_FPGA_WAIT_INIT\r\n\r\n\t\tMaximum time to wait for the INIT_B line to deassert\r\n\t\tafter PROB_B has been deasserted during a Virtex II\r\n\t\tFPGA configuration sequence. The default time is 500\r\n\t\tms.\r\n\r\n\t\tCONFIG_SYS_FPGA_WAIT_BUSY\r\n\r\n\t\tMaximum time to wait for BUSY to deassert during\r\n\t\tVirtex II FPGA configuration. The default is 5 ms.\r\n\r\n\t\tCONFIG_SYS_FPGA_WAIT_CONFIG\r\n\r\n\t\tTime to wait after FPGA configuration. The default is\r\n\t\t200 ms.\r\n\r\n- Configuration Management:\r\n\t\tCONFIG_IDENT_STRING\r\n\r\n\t\tIf defined, this string will be added to the U-Boot\r\n\t\tversion information (U_BOOT_VERSION)\r\n\r\n- Vendor Parameter Protection:\r\n\r\n\t\tU-Boot considers the values of the environment\r\n\t\tvariables \"serial#\" (Board Serial Number) and\r\n\t\t\"ethaddr\" (Ethernet Address) to be parameters that\r\n\t\tare set once by the board vendor / manufacturer, and\r\n\t\tprotects these variables from casual modification by\r\n\t\tthe user. Once set, these variables are read-only,\r\n\t\tand write or delete attempts are rejected. You can\r\n\t\tchange this behaviour:\r\n\r\n\t\tIf CONFIG_ENV_OVERWRITE is #defined in your config\r\n\t\tfile, the write protection for vendor parameters is\r\n\t\tcompletely disabled. Anybody can change or delete\r\n\t\tthese parameters.\r\n\r\n\t\tAlternatively, if you #define _both_ CONFIG_ETHADDR\r\n\t\t_and_ CONFIG_OVERWRITE_ETHADDR_ONCE, a default\r\n\t\tEthernet address is installed in the environment,\r\n\t\twhich can be changed exactly ONCE by the user. [The\r\n\t\tserial# is unaffected by this, i. e. it remains\r\n\t\tread-only.]\r\n\r\n- Protected RAM:\r\n\t\tCONFIG_PRAM\r\n\r\n\t\tDefine this variable to enable the reservation of\r\n\t\t\"protected RAM\", i. e. RAM which is not overwritten\r\n\t\tby U-Boot. Define CONFIG_PRAM to hold the number of\r\n\t\tkB you want to reserve for pRAM. You can overwrite\r\n\t\tthis default value by defining an environment\r\n\t\tvariable \"pram\" to the number of kB you want to\r\n\t\treserve. Note that the board info structure will\r\n\t\tstill show the full amount of RAM. If pRAM is\r\n\t\treserved, a new environment variable \"mem\" will\r\n\t\tautomatically be defined to hold the amount of\r\n\t\tremaining RAM in a form that can be passed as boot\r\n\t\targument to Linux, for instance like that:\r\n\r\n\t\t\tsetenv bootargs ... mem=\\${mem}\r\n\t\t\tsaveenv\r\n\r\n\t\tThis way you can tell Linux not to use this memory,\r\n\t\teither, which results in a memory region that will\r\n\t\tnot be affected by reboots.\r\n\r\n\t\t*WARNING* If your board configuration uses automatic\r\n\t\tdetection of the RAM size, you must make sure that\r\n\t\tthis memory test is non-destructive. So far, the\r\n\t\tfollowing board configurations are known to be\r\n\t\t\"pRAM-clean\":\r\n\r\n\t\t\tETX094, IVMS8, IVML24, SPD8xx, TQM8xxL,\r\n\t\t\tHERMES, IP860, RPXlite, LWMON, LANTEC,\r\n\t\t\tFLAGADM, TQM8260\r\n\r\n- Error Recovery:\r\n\t\tCONFIG_PANIC_HANG\r\n\r\n\t\tDefine this variable to stop the system in case of a\r\n\t\tfatal error, so that you have to reset it manually.\r\n\t\tThis is probably NOT a good idea for an embedded\r\n\t\tsystem where you want the system to reboot\r\n\t\tautomatically as fast as possible, but it may be\r\n\t\tuseful during development since you can try to debug\r\n\t\tthe conditions that lead to the situation.\r\n\r\n\t\tCONFIG_NET_RETRY_COUNT\r\n\r\n\t\tThis variable defines the number of retries for\r\n\t\tnetwork operations like ARP, RARP, TFTP, or BOOTP\r\n\t\tbefore giving up the operation. If not defined, a\r\n\t\tdefault value of 5 is used.\r\n\r\n\t\tCONFIG_ARP_TIMEOUT\r\n\r\n\t\tTimeout waiting for an ARP reply in milliseconds.\r\n\r\n- Command Interpreter:\r\n\t\tCONFIG_AUTO_COMPLETE\r\n\r\n\t\tEnable auto completion of commands using TAB.\r\n\r\n\t\tNote that this feature has NOT been implemented yet\r\n\t\tfor the \"hush\" shell.\r\n\r\n\r\n\t\tCONFIG_SYS_HUSH_PARSER\r\n\r\n\t\tDefine this variable to enable the \"hush\" shell (from\r\n\t\tBusybox) as command line interpreter, thus enabling\r\n\t\tpowerful command line syntax like\r\n\t\tif...then...else...fi conditionals or `&&' and '||'\r\n\t\tconstructs (\"shell scripts\").\r\n\r\n\t\tIf undefined, you get the old, much simpler behaviour\r\n\t\twith a somewhat smaller memory footprint.\r\n\r\n\r\n\t\tCONFIG_SYS_PROMPT_HUSH_PS2\r\n\r\n\t\tThis defines the secondary prompt string, which is\r\n\t\tprinted when the command interpreter needs more input\r\n\t\tto complete a command. Usually \"> \".\r\n\r\n\tNote:\r\n\r\n\t\tIn the current implementation, the local variables\r\n\t\tspace and global environment variables space are\r\n\t\tseparated. Local variables are those you define by\r\n\t\tsimply typing `name=value'. To access a local\r\n\t\tvariable later on, you have write `$name' or\r\n\t\t`${name}'; to execute the contents of a variable\r\n\t\tdirectly type `$name' at the command prompt.\r\n\r\n\t\tGlobal environment variables are those you use\r\n\t\tsetenv/printenv to work with. To run a command stored\r\n\t\tin such a variable, you need to use the run command,\r\n\t\tand you must not use the '$' sign to access them.\r\n\r\n\t\tTo store commands and special characters in a\r\n\t\tvariable, please use double quotation marks\r\n\t\tsurrounding the whole text of the variable, instead\r\n\t\tof the backslashes before semicolons and special\r\n\t\tsymbols.\r\n\r\n- Commandline Editing and History:\r\n\t\tCONFIG_CMDLINE_EDITING\r\n\r\n\t\tEnable editing and History functions for interactive\r\n\t\tcommandline input operations\r\n\r\n- Default Environment:\r\n\t\tCONFIG_EXTRA_ENV_SETTINGS\r\n\r\n\t\tDefine this to contain any number of null terminated\r\n\t\tstrings (variable = value pairs) that will be part of\r\n\t\tthe default environment compiled into the boot image.\r\n\r\n\t\tFor example, place something like this in your\r\n\t\tboard's config file:\r\n\r\n\t\t#define CONFIG_EXTRA_ENV_SETTINGS \\\r\n\t\t\t\"myvar1=value1\\0\" \\\r\n\t\t\t\"myvar2=value2\\0\"\r\n\r\n\t\tWarning: This method is based on knowledge about the\r\n\t\tinternal format how the environment is stored by the\r\n\t\tU-Boot code. This is NOT an official, exported\r\n\t\tinterface! Although it is unlikely that this format\r\n\t\twill change soon, there is no guarantee either.\r\n\t\tYou better know what you are doing here.\r\n\r\n\t\tNote: overly (ab)use of the default environment is\r\n\t\tdiscouraged. Make sure to check other ways to preset\r\n\t\tthe environment like the \"source\" command or the\r\n\t\tboot command first.\r\n\r\n- DataFlash Support:\r\n\t\tCONFIG_HAS_DATAFLASH\r\n\r\n\t\tDefining this option enables DataFlash features and\r\n\t\tallows to read/write in Dataflash via the standard\r\n\t\tcommands cp, md...\r\n\r\n- SystemACE Support:\r\n\t\tCONFIG_SYSTEMACE\r\n\r\n\t\tAdding this option adds support for Xilinx SystemACE\r\n\t\tchips attached via some sort of local bus. The address\r\n\t\tof the chip must also be defined in the\r\n\t\tCONFIG_SYS_SYSTEMACE_BASE macro. For example:\r\n\r\n\t\t#define CONFIG_SYSTEMACE\r\n\t\t#define CONFIG_SYS_SYSTEMACE_BASE 0xf0000000\r\n\r\n\t\tWhen SystemACE support is added, the \"ace\" device type\r\n\t\tbecomes available to the fat commands, i.e. fatls.\r\n\r\n- TFTP Fixed UDP Port:\r\n\t\tCONFIG_TFTP_PORT\r\n\r\n\t\tIf this is defined, the environment variable tftpsrcp\r\n\t\tis used to supply the TFTP UDP source port value.\r\n\t\tIf tftpsrcp isn't defined, the normal pseudo-random port\r\n\t\tnumber generator is used.\r\n\r\n\t\tAlso, the environment variable tftpdstp is used to supply\r\n\t\tthe TFTP UDP destination port value.  If tftpdstp isn't\r\n\t\tdefined, the normal port 69 is used.\r\n\r\n\t\tThe purpose for tftpsrcp is to allow a TFTP server to\r\n\t\tblindly start the TFTP transfer using the pre-configured\r\n\t\ttarget IP address and UDP port. This has the effect of\r\n\t\t\"punching through\" the (Windows XP) firewall, allowing\r\n\t\tthe remainder of the TFTP transfer to proceed normally.\r\n\t\tA better solution is to properly configure the firewall,\r\n\t\tbut sometimes that is not allowed.\r\n\r\n- Show boot progress:\r\n\t\tCONFIG_SHOW_BOOT_PROGRESS\r\n\r\n\t\tDefining this option allows to add some board-\r\n\t\tspecific code (calling a user-provided function\r\n\t\t\"show_boot_progress(int)\") that enables you to show\r\n\t\tthe system's boot progress on some display (for\r\n\t\texample, some LED's) on your board. At the moment,\r\n\t\tthe following checkpoints are implemented:\r\n\r\n- Standalone program support:\r\n\t\tCONFIG_STANDALONE_LOAD_ADDR\r\n\r\n\t\tThis option allows to define board specific values\r\n\t\tfor the address where standalone program gets loaded,\r\n\t\tthus overwriting the architecutre dependent default\r\n\t\tsettings.\r\n\r\n- Frame Buffer Address:\r\n\tCONFIG_FB_ADDR\r\n\r\n\tDefine CONFIG_FB_ADDR if you want to use specific address for\r\n\tframe buffer.\r\n\tThen system will reserve the frame buffer address to defined address\r\n\tinstead of lcd_setmem (this function grab the memory for frame buffer\r\n\tby panel's size).\r\n\r\n\tPlease see board_init_f function.\r\n\r\n\tIf you want this config option then,\r\n\tplease define it at your board config file\r\n\r\nLegacy uImage format:\r\n\r\n  Arg\tWhere\t\t\tWhen\r\n    1\tcommon/cmd_bootm.c\tbefore attempting to boot an image\r\n   -1\tcommon/cmd_bootm.c\tImage header has bad\t magic number\r\n    2\tcommon/cmd_bootm.c\tImage header has correct magic number\r\n   -2\tcommon/cmd_bootm.c\tImage header has bad\t checksum\r\n    3\tcommon/cmd_bootm.c\tImage header has correct checksum\r\n   -3\tcommon/cmd_bootm.c\tImage data   has bad\t checksum\r\n    4\tcommon/cmd_bootm.c\tImage data   has correct checksum\r\n   -4\tcommon/cmd_bootm.c\tImage is for unsupported architecture\r\n    5\tcommon/cmd_bootm.c\tArchitecture check OK\r\n   -5\tcommon/cmd_bootm.c\tWrong Image Type (not kernel, multi)\r\n    6\tcommon/cmd_bootm.c\tImage Type check OK\r\n   -6\tcommon/cmd_bootm.c\tgunzip uncompression error\r\n   -7\tcommon/cmd_bootm.c\tUnimplemented compression type\r\n    7\tcommon/cmd_bootm.c\tUncompression OK\r\n    8\tcommon/cmd_bootm.c\tNo uncompress/copy overwrite error\r\n   -9\tcommon/cmd_bootm.c\tUnsupported OS (not Linux, BSD, VxWorks, QNX)\r\n\r\n    9\tcommon/image.c\t\tStart initial ramdisk verification\r\n  -10\tcommon/image.c\t\tRamdisk header has bad\t   magic number\r\n  -11\tcommon/image.c\t\tRamdisk header has bad\t   checksum\r\n   10\tcommon/image.c\t\tRamdisk header is OK\r\n  -12\tcommon/image.c\t\tRamdisk data   has bad\t   checksum\r\n   11\tcommon/image.c\t\tRamdisk data   has correct checksum\r\n   12\tcommon/image.c\t\tRamdisk verification complete, start loading\r\n  -13\tcommon/image.c\t\tWrong Image Type (not PPC Linux ramdisk)\r\n   13\tcommon/image.c\t\tStart multifile image verification\r\n   14\tcommon/image.c\t\tNo initial ramdisk, no multifile, continue.\r\n\r\n   15\tarch/<arch>/lib/bootm.c\tAll preparation done, transferring control to OS\r\n\r\n  -30\tarch/powerpc/lib/board.c\tFatal error, hang the system\r\n  -31\tpost/post.c\t\tPOST test failed, detected by post_output_backlog()\r\n  -32\tpost/post.c\t\tPOST test failed, detected by post_run_single()\r\n\r\n   34\tcommon/cmd_doc.c\tbefore loading a Image from a DOC device\r\n  -35\tcommon/cmd_doc.c\tBad usage of \"doc\" command\r\n   35\tcommon/cmd_doc.c\tcorrect usage of \"doc\" command\r\n  -36\tcommon/cmd_doc.c\tNo boot device\r\n   36\tcommon/cmd_doc.c\tcorrect boot device\r\n  -37\tcommon/cmd_doc.c\tUnknown Chip ID on boot device\r\n   37\tcommon/cmd_doc.c\tcorrect chip ID found, device available\r\n  -38\tcommon/cmd_doc.c\tRead Error on boot device\r\n   38\tcommon/cmd_doc.c\treading Image header from DOC device OK\r\n  -39\tcommon/cmd_doc.c\tImage header has bad magic number\r\n   39\tcommon/cmd_doc.c\tImage header has correct magic number\r\n  -40\tcommon/cmd_doc.c\tError reading Image from DOC device\r\n   40\tcommon/cmd_doc.c\tImage header has correct magic number\r\n   41\tcommon/cmd_ide.c\tbefore loading a Image from a IDE device\r\n  -42\tcommon/cmd_ide.c\tBad usage of \"ide\" command\r\n   42\tcommon/cmd_ide.c\tcorrect usage of \"ide\" command\r\n  -43\tcommon/cmd_ide.c\tNo boot device\r\n   43\tcommon/cmd_ide.c\tboot device found\r\n  -44\tcommon/cmd_ide.c\tDevice not available\r\n   44\tcommon/cmd_ide.c\tDevice available\r\n  -45\tcommon/cmd_ide.c\twrong partition selected\r\n   45\tcommon/cmd_ide.c\tpartition selected\r\n  -46\tcommon/cmd_ide.c\tUnknown partition table\r\n   46\tcommon/cmd_ide.c\tvalid partition table found\r\n  -47\tcommon/cmd_ide.c\tInvalid partition type\r\n   47\tcommon/cmd_ide.c\tcorrect partition type\r\n  -48\tcommon/cmd_ide.c\tError reading Image Header on boot device\r\n   48\tcommon/cmd_ide.c\treading Image Header from IDE device OK\r\n  -49\tcommon/cmd_ide.c\tImage header has bad magic number\r\n   49\tcommon/cmd_ide.c\tImage header has correct magic number\r\n  -50\tcommon/cmd_ide.c\tImage header has bad\t checksum\r\n   50\tcommon/cmd_ide.c\tImage header has correct checksum\r\n  -51\tcommon/cmd_ide.c\tError reading Image from IDE device\r\n   51\tcommon/cmd_ide.c\treading Image from IDE device OK\r\n   52\tcommon/cmd_nand.c\tbefore loading a Image from a NAND device\r\n  -53\tcommon/cmd_nand.c\tBad usage of \"nand\" command\r\n   53\tcommon/cmd_nand.c\tcorrect usage of \"nand\" command\r\n  -54\tcommon/cmd_nand.c\tNo boot device\r\n   54\tcommon/cmd_nand.c\tboot device found\r\n  -55\tcommon/cmd_nand.c\tUnknown Chip ID on boot device\r\n   55\tcommon/cmd_nand.c\tcorrect chip ID found, device available\r\n  -56\tcommon/cmd_nand.c\tError reading Image Header on boot device\r\n   56\tcommon/cmd_nand.c\treading Image Header from NAND device OK\r\n  -57\tcommon/cmd_nand.c\tImage header has bad magic number\r\n   57\tcommon/cmd_nand.c\tImage header has correct magic number\r\n  -58\tcommon/cmd_nand.c\tError reading Image from NAND device\r\n   58\tcommon/cmd_nand.c\treading Image from NAND device OK\r\n\r\n  -60\tcommon/env_common.c\tEnvironment has a bad CRC, using default\r\n\r\n   64\tnet/eth.c\t\tstarting with Ethernet configuration.\r\n  -64\tnet/eth.c\t\tno Ethernet found.\r\n   65\tnet/eth.c\t\tEthernet found.\r\n\r\n  -80\tcommon/cmd_net.c\tusage wrong\r\n   80\tcommon/cmd_net.c\tbefore calling NetLoop()\r\n  -81\tcommon/cmd_net.c\tsome error in NetLoop() occurred\r\n   81\tcommon/cmd_net.c\tNetLoop() back without error\r\n  -82\tcommon/cmd_net.c\tsize == 0 (File with size 0 loaded)\r\n   82\tcommon/cmd_net.c\ttrying automatic boot\r\n   83\tcommon/cmd_net.c\trunning \"source\" command\r\n  -83\tcommon/cmd_net.c\tsome error in automatic boot or \"source\" command\r\n   84\tcommon/cmd_net.c\tend without errors\r\n\r\nFIT uImage format:\r\n\r\n  Arg\tWhere\t\t\tWhen\r\n  100\tcommon/cmd_bootm.c\tKernel FIT Image has correct format\r\n -100\tcommon/cmd_bootm.c\tKernel FIT Image has incorrect format\r\n  101\tcommon/cmd_bootm.c\tNo Kernel subimage unit name, using configuration\r\n -101\tcommon/cmd_bootm.c\tCan't get configuration for kernel subimage\r\n  102\tcommon/cmd_bootm.c\tKernel unit name specified\r\n -103\tcommon/cmd_bootm.c\tCan't get kernel subimage node offset\r\n  103\tcommon/cmd_bootm.c\tFound configuration node\r\n  104\tcommon/cmd_bootm.c\tGot kernel subimage node offset\r\n -104\tcommon/cmd_bootm.c\tKernel subimage hash verification failed\r\n  105\tcommon/cmd_bootm.c\tKernel subimage hash verification OK\r\n -105\tcommon/cmd_bootm.c\tKernel subimage is for unsupported architecture\r\n  106\tcommon/cmd_bootm.c\tArchitecture check OK\r\n -106\tcommon/cmd_bootm.c\tKernel subimage has wrong type\r\n  107\tcommon/cmd_bootm.c\tKernel subimage type OK\r\n -107\tcommon/cmd_bootm.c\tCan't get kernel subimage data/size\r\n  108\tcommon/cmd_bootm.c\tGot kernel subimage data/size\r\n -108\tcommon/cmd_bootm.c\tWrong image type (not legacy, FIT)\r\n -109\tcommon/cmd_bootm.c\tCan't get kernel subimage type\r\n -110\tcommon/cmd_bootm.c\tCan't get kernel subimage comp\r\n -111\tcommon/cmd_bootm.c\tCan't get kernel subimage os\r\n -112\tcommon/cmd_bootm.c\tCan't get kernel subimage load address\r\n -113\tcommon/cmd_bootm.c\tImage uncompress/copy overwrite error\r\n\r\n  120\tcommon/image.c\t\tStart initial ramdisk verification\r\n -120\tcommon/image.c\t\tRamdisk FIT image has incorrect format\r\n  121\tcommon/image.c\t\tRamdisk FIT image has correct format\r\n  122\tcommon/image.c\t\tNo ramdisk subimage unit name, using configuration\r\n -122\tcommon/image.c\t\tCan't get configuration for ramdisk subimage\r\n  123\tcommon/image.c\t\tRamdisk unit name specified\r\n -124\tcommon/image.c\t\tCan't get ramdisk subimage node offset\r\n  125\tcommon/image.c\t\tGot ramdisk subimage node offset\r\n -125\tcommon/image.c\t\tRamdisk subimage hash verification failed\r\n  126\tcommon/image.c\t\tRamdisk subimage hash verification OK\r\n -126\tcommon/image.c\t\tRamdisk subimage for unsupported architecture\r\n  127\tcommon/image.c\t\tArchitecture check OK\r\n -127\tcommon/image.c\t\tCan't get ramdisk subimage data/size\r\n  128\tcommon/image.c\t\tGot ramdisk subimage data/size\r\n  129\tcommon/image.c\t\tCan't get ramdisk load address\r\n -129\tcommon/image.c\t\tGot ramdisk load address\r\n\r\n -130\tcommon/cmd_doc.c\tIncorrect FIT image format\r\n  131\tcommon/cmd_doc.c\tFIT image format OK\r\n\r\n -140\tcommon/cmd_ide.c\tIncorrect FIT image format\r\n  141\tcommon/cmd_ide.c\tFIT image format OK\r\n\r\n -150\tcommon/cmd_nand.c\tIncorrect FIT image format\r\n  151\tcommon/cmd_nand.c\tFIT image format OK\r\n\r\n- Automatic software updates via TFTP server\r\n\t\tCONFIG_UPDATE_TFTP\r\n\t\tCONFIG_UPDATE_TFTP_CNT_MAX\r\n\t\tCONFIG_UPDATE_TFTP_MSEC_MAX\r\n\r\n\t\tThese options enable and control the auto-update feature;\r\n\t\tfor a more detailed description refer to doc/README.update.\r\n\r\n- MTD Support (mtdparts command, UBI support)\r\n\t\tCONFIG_MTD_DEVICE\r\n\r\n\t\tAdds the MTD device infrastructure from the Linux kernel.\r\n\t\tNeeded for mtdparts command support.\r\n\r\n\t\tCONFIG_MTD_PARTITIONS\r\n\r\n\t\tAdds the MTD partitioning infrastructure from the Linux\r\n\t\tkernel. Needed for UBI support.\r\n\r\n\r\nModem Support:\r\n--------------\r\n\r\n[so far only for SMDK2400 boards]\r\n\r\n- Modem support enable:\r\n\t\tCONFIG_MODEM_SUPPORT\r\n\r\n- RTS/CTS Flow control enable:\r\n\t\tCONFIG_HWFLOW\r\n\r\n- Modem debug support:\r\n\t\tCONFIG_MODEM_SUPPORT_DEBUG\r\n\r\n\t\tEnables debugging stuff (char screen[1024], dbg())\r\n\t\tfor modem support. Useful only with BDI2000.\r\n\r\n- Interrupt support (PPC):\r\n\r\n\t\tThere are common interrupt_init() and timer_interrupt()\r\n\t\tfor all PPC archs. interrupt_init() calls interrupt_init_cpu()\r\n\t\tfor CPU specific initialization. interrupt_init_cpu()\r\n\t\tshould set decrementer_count to appropriate value. If\r\n\t\tCPU resets decrementer automatically after interrupt\r\n\t\t(ppc4xx) it should set decrementer_count to zero.\r\n\t\ttimer_interrupt() calls timer_interrupt_cpu() for CPU\r\n\t\tspecific handling. If board has watchdog / status_led\r\n\t\t/ other_activity_monitor it works automatically from\r\n\t\tgeneral timer_interrupt().\r\n\r\n- General:\r\n\r\n\t\tIn the target system modem support is enabled when a\r\n\t\tspecific key (key combination) is pressed during\r\n\t\tpower-on. Otherwise U-Boot will boot normally\r\n\t\t(autoboot). The key_pressed() function is called from\r\n\t\tboard_init(). Currently key_pressed() is a dummy\r\n\t\tfunction, returning 1 and thus enabling modem\r\n\t\tinitialization.\r\n\r\n\t\tIf there are no modem init strings in the\r\n\t\tenvironment, U-Boot proceed to autoboot; the\r\n\t\tprevious output (banner, info printfs) will be\r\n\t\tsuppressed, though.\r\n\r\n\t\tSee also: doc/README.Modem\r\n\r\n\r\nConfiguration Settings:\r\n-----------------------\r\n\r\n- CONFIG_SYS_LONGHELP: Defined when you want long help messages included;\r\n\t\tundefine this when you're short of memory.\r\n\r\n- CONFIG_SYS_HELP_CMD_WIDTH: Defined when you want to override the default\r\n\t\twidth of the commands listed in the 'help' command output.\r\n\r\n- CONFIG_SYS_PROMPT:\tThis is what U-Boot prints on the console to\r\n\t\tprompt for user input.\r\n\r\n- CONFIG_SYS_CBSIZE:\tBuffer size for input from the Console\r\n\r\n- CONFIG_SYS_PBSIZE:\tBuffer size for Console output\r\n\r\n- CONFIG_SYS_MAXARGS:\tmax. Number of arguments accepted for monitor commands\r\n\r\n- CONFIG_SYS_BARGSIZE: Buffer size for Boot Arguments which are passed to\r\n\t\tthe application (usually a Linux kernel) when it is\r\n\t\tbooted\r\n\r\n- CONFIG_SYS_BAUDRATE_TABLE:\r\n\t\tList of legal baudrate settings for this board.\r\n\r\n- CONFIG_SYS_CONSOLE_INFO_QUIET\r\n\t\tSuppress display of console information at boot.\r\n\r\n- CONFIG_SYS_CONSOLE_IS_IN_ENV\r\n\t\tIf the board specific function\r\n\t\t\textern int overwrite_console (void);\r\n\t\treturns 1, the stdin, stderr and stdout are switched to the\r\n\t\tserial port, else the settings in the environment are used.\r\n\r\n- CONFIG_SYS_CONSOLE_OVERWRITE_ROUTINE\r\n\t\tEnable the call to overwrite_console().\r\n\r\n- CONFIG_SYS_CONSOLE_ENV_OVERWRITE\r\n\t\tEnable overwrite of previous console environment settings.\r\n\r\n- CONFIG_SYS_MEMTEST_START, CONFIG_SYS_MEMTEST_END:\r\n\t\tBegin and End addresses of the area used by the\r\n\t\tsimple memory test.\r\n\r\n- CONFIG_SYS_ALT_MEMTEST:\r\n\t\tEnable an alternate, more extensive memory test.\r\n\r\n- CONFIG_SYS_MEMTEST_SCRATCH:\r\n\t\tScratch address used by the alternate memory test\r\n\t\tYou only need to set this if address zero isn't writeable\r\n\r\n- CONFIG_SYS_MEM_TOP_HIDE (PPC only):\r\n\t\tIf CONFIG_SYS_MEM_TOP_HIDE is defined in the board config header,\r\n\t\tthis specified memory area will get subtracted from the top\r\n\t\t(end) of RAM and won't get \"touched\" at all by U-Boot. By\r\n\t\tfixing up gd->ram_size the Linux kernel should gets passed\r\n\t\tthe now \"corrected\" memory size and won't touch it either.\r\n\t\tThis should work for arch/ppc and arch/powerpc. Only Linux\r\n\t\tboard ports in arch/powerpc with bootwrapper support that\r\n\t\trecalculate the memory size from the SDRAM controller setup\r\n\t\twill have to get fixed in Linux additionally.\r\n\r\n\t\tThis option can be used as a workaround for the 440EPx/GRx\r\n\t\tCHIP 11 errata where the last 256 bytes in SDRAM shouldn't\r\n\t\tbe touched.\r\n\r\n\t\tWARNING: Please make sure that this value is a multiple of\r\n\t\tthe Linux page size (normally 4k). If this is not the case,\r\n\t\tthen the end address of the Linux memory will be located at a\r\n\t\tnon page size aligned address and this could cause major\r\n\t\tproblems.\r\n\r\n- CONFIG_SYS_TFTP_LOADADDR:\r\n\t\tDefault load address for network file downloads\r\n\r\n- CONFIG_SYS_LOADS_BAUD_CHANGE:\r\n\t\tEnable temporary baudrate change while serial download\r\n\r\n- CONFIG_SYS_SDRAM_BASE:\r\n\t\tPhysical start address of SDRAM. _Must_ be 0 here.\r\n\r\n- CONFIG_SYS_MBIO_BASE:\r\n\t\tPhysical start address of Motherboard I/O (if using a\r\n\t\tCogent motherboard)\r\n\r\n- CONFIG_SYS_FLASH_BASE:\r\n\t\tPhysical start address of Flash memory.\r\n\r\n- CONFIG_SYS_MONITOR_BASE:\r\n\t\tPhysical start address of boot monitor code (set by\r\n\t\tmake config files to be same as the text base address\r\n\t\t(CONFIG_SYS_TEXT_BASE) used when linking) - same as\r\n\t\tCONFIG_SYS_FLASH_BASE when booting from flash.\r\n\r\n- CONFIG_SYS_MONITOR_LEN:\r\n\t\tSize of memory reserved for monitor code, used to\r\n\t\tdetermine _at_compile_time_ (!) if the environment is\r\n\t\tembedded within the U-Boot image, or in a separate\r\n\t\tflash sector.\r\n\r\n- CONFIG_SYS_MALLOC_LEN:\r\n\t\tSize of DRAM reserved for malloc() use.\r\n\r\n- CONFIG_SYS_BOOTM_LEN:\r\n\t\tNormally compressed uImages are limited to an\r\n\t\tuncompressed size of 8 MBytes. If this is not enough,\r\n\t\tyou can define CONFIG_SYS_BOOTM_LEN in your board config file\r\n\t\tto adjust this setting to your needs.\r\n\r\n- CONFIG_SYS_BOOTMAPSZ:\r\n\t\tMaximum size of memory mapped by the startup code of\r\n\t\tthe Linux kernel; all data that must be processed by\r\n\t\tthe Linux kernel (bd_info, boot arguments, FDT blob if\r\n\t\tused) must be put below this limit, unless \"bootm_low\"\r\n\t\tenviroment variable is defined and non-zero. In such case\r\n\t\tall data for the Linux kernel must be between \"bootm_low\"\r\n\t\tand \"bootm_low\" + CONFIG_SYS_BOOTMAPSZ.  The environment\r\n\t\tvariable \"bootm_mapsize\" will override the value of\r\n\t\tCONFIG_SYS_BOOTMAPSZ.  If CONFIG_SYS_BOOTMAPSZ is undefined,\r\n\t\tthen the value in \"bootm_size\" will be used instead.\r\n\r\n- CONFIG_SYS_BOOT_RAMDISK_HIGH:\r\n\t\tEnable initrd_high functionality.  If defined then the\r\n\t\tinitrd_high feature is enabled and the bootm ramdisk subcommand\r\n\t\tis enabled.\r\n\r\n- CONFIG_SYS_BOOT_GET_CMDLINE:\r\n\t\tEnables allocating and saving kernel cmdline in space between\r\n\t\t\"bootm_low\" and \"bootm_low\" + BOOTMAPSZ.\r\n\r\n- CONFIG_SYS_BOOT_GET_KBD:\r\n\t\tEnables allocating and saving a kernel copy of the bd_info in\r\n\t\tspace between \"bootm_low\" and \"bootm_low\" + BOOTMAPSZ.\r\n\r\n- CONFIG_SYS_MAX_FLASH_BANKS:\r\n\t\tMax number of Flash memory banks\r\n\r\n- CONFIG_SYS_MAX_FLASH_SECT:\r\n\t\tMax number of sectors on a Flash chip\r\n\r\n- CONFIG_SYS_FLASH_ERASE_TOUT:\r\n\t\tTimeout for Flash erase operations (in ms)\r\n\r\n- CONFIG_SYS_FLASH_WRITE_TOUT:\r\n\t\tTimeout for Flash write operations (in ms)\r\n\r\n- CONFIG_SYS_FLASH_LOCK_TOUT\r\n\t\tTimeout for Flash set sector lock bit operation (in ms)\r\n\r\n- CONFIG_SYS_FLASH_UNLOCK_TOUT\r\n\t\tTimeout for Flash clear lock bits operation (in ms)\r\n\r\n- CONFIG_SYS_FLASH_PROTECTION\r\n\t\tIf defined, hardware flash sectors protection is used\r\n\t\tinstead of U-Boot software protection.\r\n\r\n- CONFIG_SYS_DIRECT_FLASH_TFTP:\r\n\r\n\t\tEnable TFTP transfers directly to flash memory;\r\n\t\twithout this option such a download has to be\r\n\t\tperformed in two steps: (1) download to RAM, and (2)\r\n\t\tcopy from RAM to flash.\r\n\r\n\t\tThe two-step approach is usually more reliable, since\r\n\t\tyou can check if the download worked before you erase\r\n\t\tthe flash, but in some situations (when system RAM is\r\n\t\ttoo limited to allow for a temporary copy of the\r\n\t\tdownloaded image) this option may be very useful.\r\n\r\n- CONFIG_SYS_FLASH_CFI:\r\n\t\tDefine if the flash driver uses extra elements in the\r\n\t\tcommon flash structure for storing flash geometry.\r\n\r\n- CONFIG_FLASH_CFI_DRIVER\r\n\t\tThis option also enables the building of the cfi_flash driver\r\n\t\tin the drivers directory\r\n\r\n- CONFIG_FLASH_CFI_MTD\r\n\t\tThis option enables the building of the cfi_mtd driver\r\n\t\tin the drivers directory. The driver exports CFI flash\r\n\t\tto the MTD layer.\r\n\r\n- CONFIG_SYS_FLASH_USE_BUFFER_WRITE\r\n\t\tUse buffered writes to flash.\r\n\r\n- CONFIG_FLASH_SPANSION_S29WS_N\r\n\t\ts29ws-n MirrorBit flash has non-standard addresses for buffered\r\n\t\twrite commands.\r\n\r\n- CONFIG_SYS_FLASH_QUIET_TEST\r\n\t\tIf this option is defined, the common CFI flash doesn't\r\n\t\tprint it's warning upon not recognized FLASH banks. This\r\n\t\tis useful, if some of the configured banks are only\r\n\t\toptionally available.\r\n\r\n- CONFIG_FLASH_SHOW_PROGRESS\r\n\t\tIf defined (must be an integer), print out countdown\r\n\t\tdigits and dots.  Recommended value: 45 (9..1) for 80\r\n\t\tcolumn displays, 15 (3..1) for 40 column displays.\r\n\r\n- CONFIG_SYS_RX_ETH_BUFFER:\r\n\t\tDefines the number of Ethernet receive buffers. On some\r\n\t\tEthernet controllers it is recommended to set this value\r\n\t\tto 8 or even higher (EEPRO100 or 405 EMAC), since all\r\n\t\tbuffers can be full shortly after enabling the interface\r\n\t\ton high Ethernet traffic.\r\n\t\tDefaults to 4 if not defined.\r\n\r\n- CONFIG_ENV_MAX_ENTRIES\r\n\r\n\tMaximum number of entries in the hash table that is used\r\n\tinternally to store the environment settings. The default\r\n\tsetting is supposed to be generous and should work in most\r\n\tcases. This setting can be used to tune behaviour; see\r\n\tlib/hashtable.c for details.\r\n\r\nThe following definitions that deal with the placement and management\r\nof environment data (variable area); in general, we support the\r\nfollowing configurations:\r\n\r\n- CONFIG_ENV_IS_IN_FLASH:\r\n\r\n\tDefine this if the environment is in flash memory.\r\n\r\n\ta) The environment occupies one whole flash sector, which is\r\n\t   \"embedded\" in the text segment with the U-Boot code. This\r\n\t   happens usually with \"bottom boot sector\" or \"top boot\r\n\t   sector\" type flash chips, which have several smaller\r\n\t   sectors at the start or the end. For instance, such a\r\n\t   layout can have sector sizes of 8, 2x4, 16, Nx32 kB. In\r\n\t   such a case you would place the environment in one of the\r\n\t   4 kB sectors - with U-Boot code before and after it. With\r\n\t   \"top boot sector\" type flash chips, you would put the\r\n\t   environment in one of the last sectors, leaving a gap\r\n\t   between U-Boot and the environment.\r\n\r\n\t- CONFIG_ENV_OFFSET:\r\n\r\n\t   Offset of environment data (variable area) to the\r\n\t   beginning of flash memory; for instance, with bottom boot\r\n\t   type flash chips the second sector can be used: the offset\r\n\t   for this sector is given here.\r\n\r\n\t   CONFIG_ENV_OFFSET is used relative to CONFIG_SYS_FLASH_BASE.\r\n\r\n\t- CONFIG_ENV_ADDR:\r\n\r\n\t   This is just another way to specify the start address of\r\n\t   the flash sector containing the environment (instead of\r\n\t   CONFIG_ENV_OFFSET).\r\n\r\n\t- CONFIG_ENV_SECT_SIZE:\r\n\r\n\t   Size of the sector containing the environment.\r\n\r\n\r\n\tb) Sometimes flash chips have few, equal sized, BIG sectors.\r\n\t   In such a case you don't want to spend a whole sector for\r\n\t   the environment.\r\n\r\n\t- CONFIG_ENV_SIZE:\r\n\r\n\t   If you use this in combination with CONFIG_ENV_IS_IN_FLASH\r\n\t   and CONFIG_ENV_SECT_SIZE, you can specify to use only a part\r\n\t   of this flash sector for the environment. This saves\r\n\t   memory for the RAM copy of the environment.\r\n\r\n\t   It may also save flash memory if you decide to use this\r\n\t   when your environment is \"embedded\" within U-Boot code,\r\n\t   since then the remainder of the flash sector could be used\r\n\t   for U-Boot code. It should be pointed out that this is\r\n\t   STRONGLY DISCOURAGED from a robustness point of view:\r\n\t   updating the environment in flash makes it always\r\n\t   necessary to erase the WHOLE sector. If something goes\r\n\t   wrong before the contents has been restored from a copy in\r\n\t   RAM, your target system will be dead.\r\n\r\n\t- CONFIG_ENV_ADDR_REDUND\r\n\t  CONFIG_ENV_SIZE_REDUND\r\n\r\n\t   These settings describe a second storage area used to hold\r\n\t   a redundant copy of the environment data, so that there is\r\n\t   a valid backup copy in case there is a power failure during\r\n\t   a \"saveenv\" operation.\r\n\r\nBE CAREFUL! Any changes to the flash layout, and some changes to the\r\nsource code will make it necessary to adapt <board>/u-boot.lds*\r\naccordingly!\r\n\r\n\r\n- CONFIG_ENV_IS_IN_NVRAM:\r\n\r\n\tDefine this if you have some non-volatile memory device\r\n\t(NVRAM, battery buffered SRAM) which you want to use for the\r\n\tenvironment.\r\n\r\n\t- CONFIG_ENV_ADDR:\r\n\t- CONFIG_ENV_SIZE:\r\n\r\n\t  These two #defines are used to determine the memory area you\r\n\t  want to use for environment. It is assumed that this memory\r\n\t  can just be read and written to, without any special\r\n\t  provision.\r\n\r\nBE CAREFUL! The first access to the environment happens quite early\r\nin U-Boot initalization (when we try to get the setting of for the\r\nconsole baudrate). You *MUST* have mapped your NVRAM area then, or\r\nU-Boot will hang.\r\n\r\nPlease note that even with NVRAM we still use a copy of the\r\nenvironment in RAM: we could work on NVRAM directly, but we want to\r\nkeep settings there always unmodified except somebody uses \"saveenv\"\r\nto save the current settings.\r\n\r\n\r\n- CONFIG_ENV_IS_IN_EEPROM:\r\n\r\n\tUse this if you have an EEPROM or similar serial access\r\n\tdevice and a driver for it.\r\n\r\n\t- CONFIG_ENV_OFFSET:\r\n\t- CONFIG_ENV_SIZE:\r\n\r\n\t  These two #defines specify the offset and size of the\r\n\t  environment area within the total memory of your EEPROM.\r\n\r\n\t- CONFIG_SYS_I2C_EEPROM_ADDR:\r\n\t  If defined, specified the chip address of the EEPROM device.\r\n\t  The default address is zero.\r\n\r\n\t- CONFIG_SYS_EEPROM_PAGE_WRITE_BITS:\r\n\t  If defined, the number of bits used to address bytes in a\r\n\t  single page in the EEPROM device.  A 64 byte page, for example\r\n\t  would require six bits.\r\n\r\n\t- CONFIG_SYS_EEPROM_PAGE_WRITE_DELAY_MS:\r\n\t  If defined, the number of milliseconds to delay between\r\n\t  page writes.\tThe default is zero milliseconds.\r\n\r\n\t- CONFIG_SYS_I2C_EEPROM_ADDR_LEN:\r\n\t  The length in bytes of the EEPROM memory array address.  Note\r\n\t  that this is NOT the chip address length!\r\n\r\n\t- CONFIG_SYS_I2C_EEPROM_ADDR_OVERFLOW:\r\n\t  EEPROM chips that implement \"address overflow\" are ones\r\n\t  like Catalyst 24WC04/08/16 which has 9/10/11 bits of\r\n\t  address and the extra bits end up in the \"chip address\" bit\r\n\t  slots. This makes a 24WC08 (1Kbyte) chip look like four 256\r\n\t  byte chips.\r\n\r\n\t  Note that we consider the length of the address field to\r\n\t  still be one byte because the extra address bits are hidden\r\n\t  in the chip address.\r\n\r\n\t- CONFIG_SYS_EEPROM_SIZE:\r\n\t  The size in bytes of the EEPROM device.\r\n\r\n\t- CONFIG_ENV_EEPROM_IS_ON_I2C\r\n\t  define this, if you have I2C and SPI activated, and your\r\n\t  EEPROM, which holds the environment, is on the I2C bus.\r\n\r\n\t- CONFIG_I2C_ENV_EEPROM_BUS\r\n\t  if you have an Environment on an EEPROM reached over\r\n\t  I2C muxes, you can define here, how to reach this\r\n\t  EEPROM. For example:\r\n\r\n\t  #define CONFIG_I2C_ENV_EEPROM_BUS\t  \"pca9547:70:d\\0\"\r\n\r\n\t  EEPROM which holds the environment, is reached over\r\n\t  a pca9547 i2c mux with address 0x70, channel 3.\r\n\r\n- CONFIG_ENV_IS_IN_DATAFLASH:\r\n\r\n\tDefine this if you have a DataFlash memory device which you\r\n\twant to use for the environment.\r\n\r\n\t- CONFIG_ENV_OFFSET:\r\n\t- CONFIG_ENV_ADDR:\r\n\t- CONFIG_ENV_SIZE:\r\n\r\n\t  These three #defines specify the offset and size of the\r\n\t  environment area within the total memory of your DataFlash placed\r\n\t  at the specified address.\r\n\r\n- CONFIG_ENV_IS_IN_NAND:\r\n\r\n\tDefine this if you have a NAND device which you want to use\r\n\tfor the environment.\r\n\r\n\t- CONFIG_ENV_OFFSET:\r\n\t- CONFIG_ENV_SIZE:\r\n\r\n\t  These two #defines specify the offset and size of the environment\r\n\t  area within the first NAND device.  CONFIG_ENV_OFFSET must be\r\n\t  aligned to an erase block boundary.\r\n\r\n\t- CONFIG_ENV_OFFSET_REDUND (optional):\r\n\r\n\t  This setting describes a second storage area of CONFIG_ENV_SIZE\r\n\t  size used to hold a redundant copy of the environment data, so\r\n\t  that there is a valid backup copy in case there is a power failure\r\n\t  during a \"saveenv\" operation.  CONFIG_ENV_OFFSET_RENDUND must be\r\n\t  aligned to an erase block boundary.\r\n\r\n\t- CONFIG_ENV_RANGE (optional):\r\n\r\n\t  Specifies the length of the region in which the environment\r\n\t  can be written.  This should be a multiple of the NAND device's\r\n\t  block size.  Specifying a range with more erase blocks than\r\n\t  are needed to hold CONFIG_ENV_SIZE allows bad blocks within\r\n\t  the range to be avoided.\r\n\r\n\t- CONFIG_ENV_OFFSET_OOB (optional):\r\n\r\n\t  Enables support for dynamically retrieving the offset of the\r\n\t  environment from block zero's out-of-band data.  The\r\n\t  \"nand env.oob\" command can be used to record this offset.\r\n\t  Currently, CONFIG_ENV_OFFSET_REDUND is not supported when\r\n\t  using CONFIG_ENV_OFFSET_OOB.\r\n\r\n- CONFIG_NAND_ENV_DST\r\n\r\n\tDefines address in RAM to which the nand_spl code should copy the\r\n\tenvironment. If redundant environment is used, it will be copied to\r\n\tCONFIG_NAND_ENV_DST + CONFIG_ENV_SIZE.\r\n\r\n- CONFIG_SYS_SPI_INIT_OFFSET\r\n\r\n\tDefines offset to the initial SPI buffer area in DPRAM. The\r\n\tarea is used at an early stage (ROM part) if the environment\r\n\tis configured to reside in the SPI EEPROM: We need a 520 byte\r\n\tscratch DPRAM area. It is used between the two initialization\r\n\tcalls (spi_init_f() and spi_init_r()). A value of 0xB00 seems\r\n\tto be a good choice since it makes it far enough from the\r\n\tstart of the data area as well as from the stack pointer.\r\n\r\nPlease note that the environment is read-only until the monitor\r\nhas been relocated to RAM and a RAM copy of the environment has been\r\ncreated; also, when using EEPROM you will have to use getenv_f()\r\nuntil then to read environment variables.\r\n\r\nThe environment is protected by a CRC32 checksum. Before the monitor\r\nis relocated into RAM, as a result of a bad CRC you will be working\r\nwith the compiled-in default environment - *silently*!!! [This is\r\nnecessary, because the first environment variable we need is the\r\n\"baudrate\" setting for the console - if we have a bad CRC, we don't\r\nhave any device yet where we could complain.]\r\n\r\nNote: once the monitor has been relocated, then it will complain if\r\nthe default environment is used; a new CRC is computed as soon as you\r\nuse the \"saveenv\" command to store a valid environment.\r\n\r\n- CONFIG_SYS_FAULT_ECHO_LINK_DOWN:\r\n\t\tEcho the inverted Ethernet link state to the fault LED.\r\n\r\n\t\tNote: If this option is active, then CONFIG_SYS_FAULT_MII_ADDR\r\n\t\t      also needs to be defined.\r\n\r\n- CONFIG_SYS_FAULT_MII_ADDR:\r\n\t\tMII address of the PHY to check for the Ethernet link state.\r\n\r\n- CONFIG_NS16550_MIN_FUNCTIONS:\r\n\t\tDefine this if you desire to only have use of the NS16550_init\r\n\t\tand NS16550_putc functions for the serial driver located at\r\n\t\tdrivers/serial/ns16550.c.  This option is useful for saving\r\n\t\tspace for already greatly restricted images, including but not\r\n\t\tlimited to NAND_SPL configurations.\r\n\r\nLow Level (hardware related) configuration options:\r\n---------------------------------------------------\r\n\r\n- CONFIG_SYS_CACHELINE_SIZE:\r\n\t\tCache Line Size of the CPU.\r\n\r\n- CONFIG_SYS_DEFAULT_IMMR:\r\n\t\tDefault address of the IMMR after system reset.\r\n\r\n\t\tNeeded on some 8260 systems (MPC8260ADS, PQ2FADS-ZU,\r\n\t\tand RPXsuper) to be able to adjust the position of\r\n\t\tthe IMMR register after a reset.\r\n\r\n- Floppy Disk Support:\r\n\t\tCONFIG_SYS_FDC_DRIVE_NUMBER\r\n\r\n\t\tthe default drive number (default value 0)\r\n\r\n\t\tCONFIG_SYS_ISA_IO_STRIDE\r\n\r\n\t\tdefines the spacing between FDC chipset registers\r\n\t\t(default value 1)\r\n\r\n\t\tCONFIG_SYS_ISA_IO_OFFSET\r\n\r\n\t\tdefines the offset of register from address. It\r\n\t\tdepends on which part of the data bus is connected to\r\n\t\tthe FDC chipset. (default value 0)\r\n\r\n\t\tIf CONFIG_SYS_ISA_IO_STRIDE CONFIG_SYS_ISA_IO_OFFSET and\r\n\t\tCONFIG_SYS_FDC_DRIVE_NUMBER are undefined, they take their\r\n\t\tdefault value.\r\n\r\n\t\tif CONFIG_SYS_FDC_HW_INIT is defined, then the function\r\n\t\tfdc_hw_init() is called at the beginning of the FDC\r\n\t\tsetup. fdc_hw_init() must be provided by the board\r\n\t\tsource code. It is used to make hardware dependant\r\n\t\tinitializations.\r\n\r\n- CONFIG_IDE_AHB:\r\n\t\tMost IDE controllers were designed to be connected with PCI\r\n\t\tinterface. Only few of them were designed for AHB interface.\r\n\t\tWhen software is doing ATA command and data transfer to\r\n\t\tIDE devices through IDE-AHB controller, some additional\r\n\t\tregisters accessing to these kind of IDE-AHB controller\r\n\t\tis requierd.\r\n\r\n- CONFIG_SYS_IMMR:\tPhysical address of the Internal Memory.\r\n\t\tDO NOT CHANGE unless you know exactly what you're\r\n\t\tdoing! (11-4) [MPC8xx/82xx systems only]\r\n\r\n- CONFIG_SYS_INIT_RAM_ADDR:\r\n\r\n\t\tStart address of memory area that can be used for\r\n\t\tinitial data and stack; please note that this must be\r\n\t\twritable memory that is working WITHOUT special\r\n\t\tinitialization, i. e. you CANNOT use normal RAM which\r\n\t\twill become available only after programming the\r\n\t\tmemory controller and running certain initialization\r\n\t\tsequences.\r\n\r\n\t\tU-Boot uses the following memory types:\r\n\t\t- MPC8xx and MPC8260: IMMR (internal memory of the CPU)\r\n\t\t- MPC824X: data cache\r\n\t\t- PPC4xx:  data cache\r\n\r\n- CONFIG_SYS_GBL_DATA_OFFSET:\r\n\r\n\t\tOffset of the initial data structure in the memory\r\n\t\tarea defined by CONFIG_SYS_INIT_RAM_ADDR. Usually\r\n\t\tCONFIG_SYS_GBL_DATA_OFFSET is chosen such that the initial\r\n\t\tdata is located at the end of the available space\r\n\t\t(sometimes written as (CONFIG_SYS_INIT_RAM_SIZE -\r\n\t\tCONFIG_SYS_INIT_DATA_SIZE), and the initial stack is just\r\n\t\tbelow that area (growing from (CONFIG_SYS_INIT_RAM_ADDR +\r\n\t\tCONFIG_SYS_GBL_DATA_OFFSET) downward.\r\n\r\n\tNote:\r\n\t\tOn the MPC824X (or other systems that use the data\r\n\t\tcache for initial memory) the address chosen for\r\n\t\tCONFIG_SYS_INIT_RAM_ADDR is basically arbitrary - it must\r\n\t\tpoint to an otherwise UNUSED address space between\r\n\t\tthe top of RAM and the start of the PCI space.\r\n\r\n- CONFIG_SYS_SIUMCR:\tSIU Module Configuration (11-6)\r\n\r\n- CONFIG_SYS_SYPCR:\tSystem Protection Control (11-9)\r\n\r\n- CONFIG_SYS_TBSCR:\tTime Base Status and Control (11-26)\r\n\r\n- CONFIG_SYS_PISCR:\tPeriodic Interrupt Status and Control (11-31)\r\n\r\n- CONFIG_SYS_PLPRCR:\tPLL, Low-Power, and Reset Control Register (15-30)\r\n\r\n- CONFIG_SYS_SCCR:\tSystem Clock and reset Control Register (15-27)\r\n\r\n- CONFIG_SYS_OR_TIMING_SDRAM:\r\n\t\tSDRAM timing\r\n\r\n- CONFIG_SYS_MAMR_PTA:\r\n\t\tperiodic timer for refresh\r\n\r\n- CONFIG_SYS_DER:\tDebug Event Register (37-47)\r\n\r\n- FLASH_BASE0_PRELIM, FLASH_BASE1_PRELIM, CONFIG_SYS_REMAP_OR_AM,\r\n  CONFIG_SYS_PRELIM_OR_AM, CONFIG_SYS_OR_TIMING_FLASH, CONFIG_SYS_OR0_REMAP,\r\n  CONFIG_SYS_OR0_PRELIM, CONFIG_SYS_BR0_PRELIM, CONFIG_SYS_OR1_REMAP, CONFIG_SYS_OR1_PRELIM,\r\n  CONFIG_SYS_BR1_PRELIM:\r\n\t\tMemory Controller Definitions: BR0/1 and OR0/1 (FLASH)\r\n\r\n- SDRAM_BASE2_PRELIM, SDRAM_BASE3_PRELIM, SDRAM_MAX_SIZE,\r\n  CONFIG_SYS_OR_TIMING_SDRAM, CONFIG_SYS_OR2_PRELIM, CONFIG_SYS_BR2_PRELIM,\r\n  CONFIG_SYS_OR3_PRELIM, CONFIG_SYS_BR3_PRELIM:\r\n\t\tMemory Controller Definitions: BR2/3 and OR2/3 (SDRAM)\r\n\r\n- CONFIG_SYS_MAMR_PTA, CONFIG_SYS_MPTPR_2BK_4K, CONFIG_SYS_MPTPR_1BK_4K, CONFIG_SYS_MPTPR_2BK_8K,\r\n  CONFIG_SYS_MPTPR_1BK_8K, CONFIG_SYS_MAMR_8COL, CONFIG_SYS_MAMR_9COL:\r\n\t\tMachine Mode Register and Memory Periodic Timer\r\n\t\tPrescaler definitions (SDRAM timing)\r\n\r\n- CONFIG_SYS_I2C_UCODE_PATCH, CONFIG_SYS_I2C_DPMEM_OFFSET [0x1FC0]:\r\n\t\tenable I2C microcode relocation patch (MPC8xx);\r\n\t\tdefine relocation offset in DPRAM [DSP2]\r\n\r\n- CONFIG_SYS_SMC_UCODE_PATCH, CONFIG_SYS_SMC_DPMEM_OFFSET [0x1FC0]:\r\n\t\tenable SMC microcode relocation patch (MPC8xx);\r\n\t\tdefine relocation offset in DPRAM [SMC1]\r\n\r\n- CONFIG_SYS_SPI_UCODE_PATCH, CONFIG_SYS_SPI_DPMEM_OFFSET [0x1FC0]:\r\n\t\tenable SPI microcode relocation patch (MPC8xx);\r\n\t\tdefine relocation offset in DPRAM [SCC4]\r\n\r\n- CONFIG_SYS_USE_OSCCLK:\r\n\t\tUse OSCM clock mode on MBX8xx board. Be careful,\r\n\t\twrong setting might damage your board. Read\r\n\t\tdoc/README.MBX before setting this variable!\r\n\r\n- CONFIG_SYS_CPM_POST_WORD_ADDR: (MPC8xx, MPC8260 only)\r\n\t\tOffset of the bootmode word in DPRAM used by post\r\n\t\t(Power On Self Tests). This definition overrides\r\n\t\t#define'd default value in commproc.h resp.\r\n\t\tcpm_8260.h.\r\n\r\n- CONFIG_SYS_PCI_SLV_MEM_LOCAL, CONFIG_SYS_PCI_SLV_MEM_BUS, CONFIG_SYS_PICMR0_MASK_ATTRIB,\r\n  CONFIG_SYS_PCI_MSTR0_LOCAL, CONFIG_SYS_PCIMSK0_MASK, CONFIG_SYS_PCI_MSTR1_LOCAL,\r\n  CONFIG_SYS_PCIMSK1_MASK, CONFIG_SYS_PCI_MSTR_MEM_LOCAL, CONFIG_SYS_PCI_MSTR_MEM_BUS,\r\n  CONFIG_SYS_CPU_PCI_MEM_START, CONFIG_SYS_PCI_MSTR_MEM_SIZE, CONFIG_SYS_POCMR0_MASK_ATTRIB,\r\n  CONFIG_SYS_PCI_MSTR_MEMIO_LOCAL, CONFIG_SYS_PCI_MSTR_MEMIO_BUS, CPU_PCI_MEMIO_START,\r\n  CONFIG_SYS_PCI_MSTR_MEMIO_SIZE, CONFIG_SYS_POCMR1_MASK_ATTRIB, CONFIG_SYS_PCI_MSTR_IO_LOCAL,\r\n  CONFIG_SYS_PCI_MSTR_IO_BUS, CONFIG_SYS_CPU_PCI_IO_START, CONFIG_SYS_PCI_MSTR_IO_SIZE,\r\n  CONFIG_SYS_POCMR2_MASK_ATTRIB: (MPC826x only)\r\n\t\tOverrides the default PCI memory map in arch/powerpc/cpu/mpc8260/pci.c if set.\r\n\r\n- CONFIG_PCI_DISABLE_PCIE:\r\n\t\tDisable PCI-Express on systems where it is supported but not\r\n\t\trequired.\r\n\r\n- CONFIG_SYS_SRIO:\r\n\t\tChip has SRIO or not\r\n\r\n- CONFIG_SRIO1:\r\n\t\tBoard has SRIO 1 port available\r\n\r\n- CONFIG_SRIO2:\r\n\t\tBoard has SRIO 2 port available\r\n\r\n- CONFIG_SYS_SRIOn_MEM_VIRT:\r\n\t\tVirtual Address of SRIO port 'n' memory region\r\n\r\n- CONFIG_SYS_SRIOn_MEM_PHYS:\r\n\t\tPhysical Address of SRIO port 'n' memory region\r\n\r\n- CONFIG_SYS_SRIOn_MEM_SIZE:\r\n\t\tSize of SRIO port 'n' memory region\r\n\r\n- CONFIG_SPD_EEPROM\r\n\t\tGet DDR timing information from an I2C EEPROM. Common\r\n\t\twith pluggable memory modules such as SODIMMs\r\n\r\n  SPD_EEPROM_ADDRESS\r\n\t\tI2C address of the SPD EEPROM\r\n\r\n- CONFIG_SYS_SPD_BUS_NUM\r\n\t\tIf SPD EEPROM is on an I2C bus other than the first\r\n\t\tone, specify here. Note that the value must resolve\r\n\t\tto something your driver can deal with.\r\n\r\n- CONFIG_SYS_83XX_DDR_USES_CS0\r\n\t\tOnly for 83xx systems. If specified, then DDR should\r\n\t\tbe configured using CS0 and CS1 instead of CS2 and CS3.\r\n\r\n- CONFIG_ETHER_ON_FEC[12]\r\n\t\tDefine to enable FEC[12] on a 8xx series processor.\r\n\r\n- CONFIG_FEC[12]_PHY\r\n\t\tDefine to the hardcoded PHY address which corresponds\r\n\t\tto the given FEC; i. e.\r\n\t\t\t#define CONFIG_FEC1_PHY 4\r\n\t\tmeans that the PHY with address 4 is connected to FEC1\r\n\r\n\t\tWhen set to -1, means to probe for first available.\r\n\r\n- CONFIG_FEC[12]_PHY_NORXERR\r\n\t\tThe PHY does not have a RXERR line (RMII only).\r\n\t\t(so program the FEC to ignore it).\r\n\r\n- CONFIG_RMII\r\n\t\tEnable RMII mode for all FECs.\r\n\t\tNote that this is a global option, we can't\r\n\t\thave one FEC in standard MII mode and another in RMII mode.\r\n\r\n- CONFIG_CRC32_VERIFY\r\n\t\tAdd a verify option to the crc32 command.\r\n\t\tThe syntax is:\r\n\r\n\t\t=> crc32 -v <address> <count> <crc32>\r\n\r\n\t\tWhere address/count indicate a memory area\r\n\t\tand crc32 is the correct crc32 which the\r\n\t\tarea should have.\r\n\r\n- CONFIG_LOOPW\r\n\t\tAdd the \"loopw\" memory command. This only takes effect if\r\n\t\tthe memory commands are activated globally (CONFIG_CMD_MEM).\r\n\r\n- CONFIG_MX_CYCLIC\r\n\t\tAdd the \"mdc\" and \"mwc\" memory commands. These are cyclic\r\n\t\t\"md/mw\" commands.\r\n\t\tExamples:\r\n\r\n\t\t=> mdc.b 10 4 500\r\n\t\tThis command will print 4 bytes (10,11,12,13) each 500 ms.\r\n\r\n\t\t=> mwc.l 100 12345678 10\r\n\t\tThis command will write 12345678 to address 100 all 10 ms.\r\n\r\n\t\tThis only takes effect if the memory commands are activated\r\n\t\tglobally (CONFIG_CMD_MEM).\r\n\r\n- CONFIG_SKIP_LOWLEVEL_INIT\r\n\t\t[ARM only] If this variable is defined, then certain\r\n\t\tlow level initializations (like setting up the memory\r\n\t\tcontroller) are omitted and/or U-Boot does not\r\n\t\trelocate itself into RAM.\r\n\r\n\t\tNormally this variable MUST NOT be defined. The only\r\n\t\texception is when U-Boot is loaded (to RAM) by some\r\n\t\tother boot loader or by a debugger which performs\r\n\t\tthese initializations itself.\r\n\r\n- CONFIG_PRELOADER\r\n\t\tModifies the behaviour of start.S when compiling a loader\r\n\t\tthat is executed before the actual U-Boot. E.g. when\r\n\t\tcompiling a NAND SPL.\r\n\r\n- CONFIG_USE_ARCH_MEMCPY\r\n  CONFIG_USE_ARCH_MEMSET\r\n\t\tIf these options are used a optimized version of memcpy/memset will\r\n\t\tbe used if available. These functions may be faster under some\r\n\t\tconditions but may increase the binary size.\r\n\r\nBuilding the Software:\r\n======================\r\n\r\nBuilding U-Boot has been tested in several native build environments\r\nand in many different cross environments. Of course we cannot support\r\nall possibly existing versions of cross development tools in all\r\n(potentially obsolete) versions. In case of tool chain problems we\r\nrecommend to use the ELDK (see http://www.denx.de/wiki/DULG/ELDK)\r\nwhich is extensively used to build and test U-Boot.\r\n\r\nIf you are not using a native environment, it is assumed that you\r\nhave GNU cross compiling tools available in your path. In this case,\r\nyou must set the environment variable CROSS_COMPILE in your shell.\r\nNote that no changes to the Makefile or any other source files are\r\nnecessary. For example using the ELDK on a 4xx CPU, please enter:\r\n\r\n\t$ CROSS_COMPILE=ppc_4xx-\r\n\t$ export CROSS_COMPILE\r\n\r\nNote: If you wish to generate Windows versions of the utilities in\r\n      the tools directory you can use the MinGW toolchain\r\n      (http://www.mingw.org).  Set your HOST tools to the MinGW\r\n      toolchain and execute 'make tools'.  For example:\r\n\r\n       $ make HOSTCC=i586-mingw32msvc-gcc HOSTSTRIP=i586-mingw32msvc-strip tools\r\n\r\n      Binaries such as tools/mkimage.exe will be created which can\r\n      be executed on computers running Windows.\r\n\r\nU-Boot is intended to be simple to build. After installing the\r\nsources you must configure U-Boot for one specific board type. This\r\nis done by typing:\r\n\r\n\tmake NAME_config\r\n\r\nwhere \"NAME_config\" is the name of one of the existing configu-\r\nrations; see the main Makefile for supported names.\r\n\r\nNote: for some board special configuration names may exist; check if\r\n      additional information is available from the board vendor; for\r\n      instance, the TQM823L systems are available without (standard)\r\n      or with LCD support. You can select such additional \"features\"\r\n      when choosing the configuration, i. e.\r\n\r\n      make TQM823L_config\r\n\t- will configure for a plain TQM823L, i. e. no LCD support\r\n\r\n      make TQM823L_LCD_config\r\n\t- will configure for a TQM823L with U-Boot console on LCD\r\n\r\n      etc.\r\n\r\n\r\nFinally, type \"make all\", and you should get some working U-Boot\r\nimages ready for download to / installation on your system:\r\n\r\n- \"u-boot.bin\" is a raw binary image\r\n- \"u-boot\" is an image in ELF binary format\r\n- \"u-boot.srec\" is in Motorola S-Record format\r\n\r\nBy default the build is performed locally and the objects are saved\r\nin the source directory. One of the two methods can be used to change\r\nthis behavior and build U-Boot to some external directory:\r\n\r\n1. Add O= to the make command line invocations:\r\n\r\n\tmake O=/tmp/build distclean\r\n\tmake O=/tmp/build NAME_config\r\n\tmake O=/tmp/build all\r\n\r\n2. Set environment variable BUILD_DIR to point to the desired location:\r\n\r\n\texport BUILD_DIR=/tmp/build\r\n\tmake distclean\r\n\tmake NAME_config\r\n\tmake all\r\n\r\nNote that the command line \"O=\" setting overrides the BUILD_DIR environment\r\nvariable.\r\n\r\n\r\nPlease be aware that the Makefiles assume you are using GNU make, so\r\nfor instance on NetBSD you might need to use \"gmake\" instead of\r\nnative \"make\".\r\n\r\n\r\nIf the system board that you have is not listed, then you will need\r\nto port U-Boot to your hardware platform. To do this, follow these\r\nsteps:\r\n\r\n1.  Add a new configuration option for your board to the toplevel\r\n    \"Makefile\" and to the \"MAKEALL\" script, using the existing\r\n    entries as examples. Note that here and at many other places\r\n    boards and other names are listed in alphabetical sort order. Please\r\n    keep this order.\r\n2.  Create a new directory to hold your board specific code. Add any\r\n    files you need. In your board directory, you will need at least\r\n    the \"Makefile\", a \"<board>.c\", \"flash.c\" and \"u-boot.lds\".\r\n3.  Create a new configuration file \"include/configs/<board>.h\" for\r\n    your board\r\n3.  If you're porting U-Boot to a new CPU, then also create a new\r\n    directory to hold your CPU specific code. Add any files you need.\r\n4.  Run \"make <board>_config\" with your new name.\r\n5.  Type \"make\", and you should get a working \"u-boot.srec\" file\r\n    to be installed on your target system.\r\n6.  Debug and solve any problems that might arise.\r\n    [Of course, this last step is much harder than it sounds.]\r\n\r\n\r\nTesting of U-Boot Modifications, Ports to New Hardware, etc.:\r\n==============================================================\r\n\r\nIf you have modified U-Boot sources (for instance added a new board\r\nor support for new devices, a new CPU, etc.) you are expected to\r\nprovide feedback to the other developers. The feedback normally takes\r\nthe form of a \"patch\", i. e. a context diff against a certain (latest\r\nofficial or latest in the git repository) version of U-Boot sources.\r\n\r\nBut before you submit such a patch, please verify that your modifi-\r\ncation did not break existing code. At least make sure that *ALL* of\r\nthe supported boards compile WITHOUT ANY compiler warnings. To do so,\r\njust run the \"MAKEALL\" script, which will configure and build U-Boot\r\nfor ALL supported system. Be warned, this will take a while. You can\r\nselect which (cross) compiler to use by passing a `CROSS_COMPILE'\r\nenvironment variable to the script, i. e. to use the ELDK cross tools\r\nyou can type\r\n\r\n\tCROSS_COMPILE=ppc_8xx- MAKEALL\r\n\r\nor to build on a native PowerPC system you can type\r\n\r\n\tCROSS_COMPILE=' ' MAKEALL\r\n\r\nWhen using the MAKEALL script, the default behaviour is to build\r\nU-Boot in the source directory. This location can be changed by\r\nsetting the BUILD_DIR environment variable. Also, for each target\r\nbuilt, the MAKEALL script saves two log files (<target>.ERR and\r\n<target>.MAKEALL) in the <source dir>/LOG directory. This default\r\nlocation can be changed by setting the MAKEALL_LOGDIR environment\r\nvariable. For example:\r\n\r\n\texport BUILD_DIR=/tmp/build\r\n\texport MAKEALL_LOGDIR=/tmp/log\r\n\tCROSS_COMPILE=ppc_8xx- MAKEALL\r\n\r\nWith the above settings build objects are saved in the /tmp/build,\r\nlog files are saved in the /tmp/log and the source tree remains clean\r\nduring the whole build process.\r\n\r\n\r\nSee also \"U-Boot Porting Guide\" below.\r\n\r\n\r\nMonitor Commands - Overview:\r\n============================\r\n\r\ngo\t- start application at address 'addr'\r\nrun\t- run commands in an environment variable\r\nbootm\t- boot application image from memory\r\nbootp\t- boot image via network using BootP/TFTP protocol\r\ntftpboot- boot image via network using TFTP protocol\r\n\t       and env variables \"ipaddr\" and \"serverip\"\r\n\t       (and eventually \"gatewayip\")\r\nrarpboot- boot image via network using RARP/TFTP protocol\r\ndiskboot- boot from IDE devicebootd   - boot default, i.e., run 'bootcmd'\r\nloads\t- load S-Record file over serial line\r\nloadb\t- load binary file over serial line (kermit mode)\r\nmd\t- memory display\r\nmm\t- memory modify (auto-incrementing)\r\nnm\t- memory modify (constant address)\r\nmw\t- memory write (fill)\r\ncp\t- memory copy\r\ncmp\t- memory compare\r\ncrc32\t- checksum calculation\r\ni2c\t- I2C sub-system\r\nsspi\t- SPI utility commands\r\nbase\t- print or set address offset\r\nprintenv- print environment variables\r\nsetenv\t- set environment variables\r\nsaveenv - save environment variables to persistent storage\r\nprotect - enable or disable FLASH write protection\r\nerase\t- erase FLASH memory\r\nflinfo\t- print FLASH memory information\r\nbdinfo\t- print Board Info structure\r\niminfo\t- print header information for application image\r\nconinfo - print console devices and informations\r\nide\t- IDE sub-system\r\nloop\t- infinite loop on address range\r\nloopw\t- infinite write loop on address range\r\nmtest\t- simple RAM test\r\nicache\t- enable or disable instruction cache\r\ndcache\t- enable or disable data cache\r\nreset\t- Perform RESET of the CPU\r\necho\t- echo args to console\r\nversion - print monitor version\r\nhelp\t- print online help\r\n?\t- alias for 'help'\r\n\r\n\r\nMonitor Commands - Detailed Description:\r\n========================================\r\n\r\nTODO.\r\n\r\nFor now: just type \"help <command>\".\r\n\r\n\r\nEnvironment Variables:\r\n======================\r\n\r\nU-Boot supports user configuration using Environment Variables which\r\ncan be made persistent by saving to Flash memory.\r\n\r\nEnvironment Variables are set using \"setenv\", printed using\r\n\"printenv\", and saved to Flash using \"saveenv\". Using \"setenv\"\r\nwithout a value can be used to delete a variable from the\r\nenvironment. As long as you don't save the environment you are\r\nworking with an in-memory copy. In case the Flash area containing the\r\nenvironment is erased by accident, a default environment is provided.\r\n\r\nSome configuration options can be set using Environment Variables.\r\n\r\nList of environment variables (most likely not complete):\r\n\r\n  baudrate\t- see CONFIG_BAUDRATE\r\n\r\n  bootdelay\t- see CONFIG_BOOTDELAY\r\n\r\n  bootcmd\t- see CONFIG_BOOTCOMMAND\r\n\r\n  bootargs\t- Boot arguments when booting an RTOS image\r\n\r\n  bootfile\t- Name of the image to load with TFTP\r\n\r\n  bootm_low\t- Memory range available for image processing in the bootm\r\n\t\t  command can be restricted. This variable is given as\r\n\t\t  a hexadecimal number and defines lowest address allowed\r\n\t\t  for use by the bootm command. See also \"bootm_size\"\r\n\t\t  environment variable. Address defined by \"bootm_low\" is\r\n\t\t  also the base of the initial memory mapping for the Linux\r\n\t\t  kernel -- see the description of CONFIG_SYS_BOOTMAPSZ and\r\n\t\t  bootm_mapsize.\r\n\r\n  bootm_mapsize\t- Size of the initial memory mapping for the Linux kernel.\r\n\t\t  This variable is given as a hexadecimal number and it\r\n\t\t  defines the size of the memory region starting at base\r\n\t\t  address bootm_low that is accessible by the Linux kernel\r\n\t\t  during early boot.  If unset, CONFIG_SYS_BOOTMAPSZ is used\r\n\t\t  as the default value if it is defined, and bootm_size is\r\n\t\t  used otherwise.\r\n\r\n  bootm_size\t- Memory range available for image processing in the bootm\r\n\t\t  command can be restricted. This variable is given as\r\n\t\t  a hexadecimal number and defines the size of the region\r\n\t\t  allowed for use by the bootm command. See also \"bootm_low\"\r\n\t\t  environment variable.\r\n\r\n  updatefile\t- Location of the software update file on a TFTP server, used\r\n\t\t  by the automatic software update feature. Please refer to\r\n\t\t  documentation in doc/README.update for more details.\r\n\r\n  autoload\t- if set to \"no\" (any string beginning with 'n'),\r\n\t\t  \"bootp\" will just load perform a lookup of the\r\n\t\t  configuration from the BOOTP server, but not try to\r\n\t\t  load any image using TFTP\r\n\r\n  autostart\t- if set to \"yes\", an image loaded using the \"bootp\",\r\n\t\t  \"rarpboot\", \"tftpboot\" or \"diskboot\" commands will\r\n\t\t  be automatically started (by internally calling\r\n\t\t  \"bootm\")\r\n\r\n\t\t  If set to \"no\", a standalone image passed to the\r\n\t\t  \"bootm\" command will be copied to the load address\r\n\t\t  (and eventually uncompressed), but NOT be started.\r\n\t\t  This can be used to load and uncompress arbitrary\r\n\t\t  data.\r\n\r\n  i2cfast\t- (PPC405GP|PPC405EP only)\r\n\t\t  if set to 'y' configures Linux I2C driver for fast\r\n\t\t  mode (400kHZ). This environment variable is used in\r\n\t\t  initialization code. So, for changes to be effective\r\n\t\t  it must be saved and board must be reset.\r\n\r\n  initrd_high\t- restrict positioning of initrd images:\r\n\t\t  If this variable is not set, initrd images will be\r\n\t\t  copied to the highest possible address in RAM; this\r\n\t\t  is usually what you want since it allows for\r\n\t\t  maximum initrd size. If for some reason you want to\r\n\t\t  make sure that the initrd image is loaded below the\r\n\t\t  CONFIG_SYS_BOOTMAPSZ limit, you can set this environment\r\n\t\t  variable to a value of \"no\" or \"off\" or \"0\".\r\n\t\t  Alternatively, you can set it to a maximum upper\r\n\t\t  address to use (U-Boot will still check that it\r\n\t\t  does not overwrite the U-Boot stack and data).\r\n\r\n\t\t  For instance, when you have a system with 16 MB\r\n\t\t  RAM, and want to reserve 4 MB from use by Linux,\r\n\t\t  you can do this by adding \"mem=12M\" to the value of\r\n\t\t  the \"bootargs\" variable. However, now you must make\r\n\t\t  sure that the initrd image is placed in the first\r\n\t\t  12 MB as well - this can be done with\r\n\r\n\t\t  setenv initrd_high 00c00000\r\n\r\n\t\t  If you set initrd_high to 0xFFFFFFFF, this is an\r\n\t\t  indication to U-Boot that all addresses are legal\r\n\t\t  for the Linux kernel, including addresses in flash\r\n\t\t  memory. In this case U-Boot will NOT COPY the\r\n\t\t  ramdisk at all. This may be useful to reduce the\r\n\t\t  boot time on your system, but requires that this\r\n\t\t  feature is supported by your Linux kernel.\r\n\r\n  ipaddr\t- IP address; needed for tftpboot command\r\n\r\n  loadaddr\t- Default load address for commands like \"bootp\",\r\n\t\t  \"rarpboot\", \"tftpboot\", \"loadb\" or \"diskboot\"\r\n\r\n  loads_echo\t- see CONFIG_LOADS_ECHO\r\n\r\n  serverip\t- TFTP server IP address; needed for tftpboot command\r\n\r\n  bootretry\t- see CONFIG_BOOT_RETRY_TIME\r\n\r\n  bootdelaykey\t- see CONFIG_AUTOBOOT_DELAY_STR\r\n\r\n  bootstopkey\t- see CONFIG_AUTOBOOT_STOP_STR\r\n\r\n  ethprime\t- When CONFIG_NET_MULTI is enabled controls which\r\n\t\t  interface is used first.\r\n\r\n  ethact\t- When CONFIG_NET_MULTI is enabled controls which\r\n\t\t  interface is currently active. For example you\r\n\t\t  can do the following\r\n\r\n\t\t  => setenv ethact FEC\r\n\t\t  => ping 192.168.0.1 # traffic sent on FEC\r\n\t\t  => setenv ethact SCC\r\n\t\t  => ping 10.0.0.1 # traffic sent on SCC\r\n\r\n  ethrotate\t- When set to \"no\" U-Boot does not go through all\r\n\t\t  available network interfaces.\r\n\t\t  It just stays at the currently selected interface.\r\n\r\n  netretry\t- When set to \"no\" each network operation will\r\n\t\t  either succeed or fail without retrying.\r\n\t\t  When set to \"once\" the network operation will\r\n\t\t  fail when all the available network interfaces\r\n\t\t  are tried once without success.\r\n\t\t  Useful on scripts which control the retry operation\r\n\t\t  themselves.\r\n\r\n  npe_ucode\t- set load address for the NPE microcode\r\n\r\n  tftpsrcport\t- If this is set, the value is used for TFTP's\r\n\t\t  UDP source port.\r\n\r\n  tftpdstport\t- If this is set, the value is used for TFTP's UDP\r\n\t\t  destination port instead of the Well Know Port 69.\r\n\r\n  tftpblocksize - Block size to use for TFTP transfers; if not set,\r\n\t\t  we use the TFTP server's default block size\r\n\r\n  tftptimeout\t- Retransmission timeout for TFTP packets (in milli-\r\n\t\t  seconds, minimum value is 1000 = 1 second). Defines\r\n\t\t  when a packet is considered to be lost so it has to\r\n\t\t  be retransmitted. The default is 5000 = 5 seconds.\r\n\t\t  Lowering this value may make downloads succeed\r\n\t\t  faster in networks with high packet loss rates or\r\n\t\t  with unreliable TFTP servers.\r\n\r\n  vlan\t\t- When set to a value < 4095 the traffic over\r\n\t\t  Ethernet is encapsulated/received over 802.1q\r\n\t\t  VLAN tagged frames.\r\n\r\nThe following environment variables may be used and automatically\r\nupdated by the network boot commands (\"bootp\" and \"rarpboot\"),\r\ndepending the information provided by your boot server:\r\n\r\n  bootfile\t- see above\r\n  dnsip\t\t- IP address of your Domain Name Server\r\n  dnsip2\t- IP address of your secondary Domain Name Server\r\n  gatewayip\t- IP address of the Gateway (Router) to use\r\n  hostname\t- Target hostname\r\n  ipaddr\t- see above\r\n  netmask\t- Subnet Mask\r\n  rootpath\t- Pathname of the root filesystem on the NFS server\r\n  serverip\t- see above\r\n\r\n\r\nThere are two special Environment Variables:\r\n\r\n  serial#\t- contains hardware identification information such\r\n\t\t  as type string and/or serial number\r\n  ethaddr\t- Ethernet address\r\n\r\nThese variables can be set only once (usually during manufacturing of\r\nthe board). U-Boot refuses to delete or overwrite these variables\r\nonce they have been set once.\r\n\r\n\r\nFurther special Environment Variables:\r\n\r\n  ver\t\t- Contains the U-Boot version string as printed\r\n\t\t  with the \"version\" command. This variable is\r\n\t\t  readonly (see CONFIG_VERSION_VARIABLE).\r\n\r\n\r\nPlease note that changes to some configuration parameters may take\r\nonly effect after the next boot (yes, that's just like Windoze :-).\r\n\r\n\r\nCommand Line Parsing:\r\n=====================\r\n\r\nThere are two different command line parsers available with U-Boot:\r\nthe old \"simple\" one, and the much more powerful \"hush\" shell:\r\n\r\nOld, simple command line parser:\r\n--------------------------------\r\n\r\n- supports environment variables (through setenv / saveenv commands)\r\n- several commands on one line, separated by ';'\r\n- variable substitution using \"... ${name} ...\" syntax\r\n- special characters ('$', ';') can be escaped by prefixing with '\\',\r\n  for example:\r\n\tsetenv bootcmd bootm \\${address}\r\n- You can also escape text by enclosing in single apostrophes, for example:\r\n\tsetenv addip 'setenv bootargs $bootargs ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname::off'\r\n\r\nHush shell:\r\n-----------\r\n\r\n- similar to Bourne shell, with control structures like\r\n  if...then...else...fi, for...do...done; while...do...done,\r\n  until...do...done, ...\r\n- supports environment (\"global\") variables (through setenv / saveenv\r\n  commands) and local shell variables (through standard shell syntax\r\n  \"name=value\"); only environment variables can be used with \"run\"\r\n  command\r\n\r\nGeneral rules:\r\n--------------\r\n\r\n(1) If a command line (or an environment variable executed by a \"run\"\r\n    command) contains several commands separated by semicolon, and\r\n    one of these commands fails, then the remaining commands will be\r\n    executed anyway.\r\n\r\n(2) If you execute several variables with one call to run (i. e.\r\n    calling run with a list of variables as arguments), any failing\r\n    command will cause \"run\" to terminate, i. e. the remaining\r\n    variables are not executed.\r\n\r\nNote for Redundant Ethernet Interfaces:\r\n=======================================\r\n\r\nSome boards come with redundant Ethernet interfaces; U-Boot supports\r\nsuch configurations and is capable of automatic selection of a\r\n\"working\" interface when needed. MAC assignment works as follows:\r\n\r\nNetwork interfaces are numbered eth0, eth1, eth2, ... Corresponding\r\nMAC addresses can be stored in the environment as \"ethaddr\" (=>eth0),\r\n\"eth1addr\" (=>eth1), \"eth2addr\", ...\r\n\r\nIf the network interface stores some valid MAC address (for instance\r\nin SROM), this is used as default address if there is NO correspon-\r\nding setting in the environment; if the corresponding environment\r\nvariable is set, this overrides the settings in the card; that means:\r\n\r\no If the SROM has a valid MAC address, and there is no address in the\r\n  environment, the SROM's address is used.\r\n\r\no If there is no valid address in the SROM, and a definition in the\r\n  environment exists, then the value from the environment variable is\r\n  used.\r\n\r\no If both the SROM and the environment contain a MAC address, and\r\n  both addresses are the same, this MAC address is used.\r\n\r\no If both the SROM and the environment contain a MAC address, and the\r\n  addresses differ, the value from the environment is used and a\r\n  warning is printed.\r\n\r\no If neither SROM nor the environment contain a MAC address, an error\r\n  is raised.\r\n\r\nIf Ethernet drivers implement the 'write_hwaddr' function, valid MAC addresses\r\nwill be programmed into hardware as part of the initialization process.  This\r\nmay be skipped by setting the appropriate 'ethmacskip' environment variable.\r\nThe naming convention is as follows:\r\n\"ethmacskip\" (=>eth0), \"eth1macskip\" (=>eth1) etc.\r\n\r\nImage Formats:\r\n==============\r\n\r\nU-Boot is capable of booting (and performing other auxiliary operations on)\r\nimages in two formats:\r\n\r\nNew uImage format (FIT)\r\n-----------------------\r\n\r\nFlexible and powerful format based on Flattened Image Tree -- FIT (similar\r\nto Flattened Device Tree). It allows the use of images with multiple\r\ncomponents (several kernels, ramdisks, etc.), with contents protected by\r\nSHA1, MD5 or CRC32. More details are found in the doc/uImage.FIT directory.\r\n\r\n\r\nOld uImage format\r\n-----------------\r\n\r\nOld image format is based on binary files which can be basically anything,\r\npreceded by a special header; see the definitions in include/image.h for\r\ndetails; basically, the header defines the following image properties:\r\n\r\n* Target Operating System (Provisions for OpenBSD, NetBSD, FreeBSD,\r\n  4.4BSD, Linux, SVR4, Esix, Solaris, Irix, SCO, Dell, NCR, VxWorks,\r\n  LynxOS, pSOS, QNX, RTEMS, INTEGRITY;\r\n  Currently supported: Linux, NetBSD, VxWorks, QNX, RTEMS, LynxOS,\r\n  INTEGRITY).\r\n* Target CPU Architecture (Provisions for Alpha, ARM, AVR32, Intel x86,\r\n  IA64, MIPS, Nios II, PowerPC, IBM S390, SuperH, Sparc, Sparc 64 Bit;\r\n  Currently supported: ARM, AVR32, Intel x86, MIPS, Nios II, PowerPC).\r\n* Compression Type (uncompressed, gzip, bzip2)\r\n* Load Address\r\n* Entry Point\r\n* Image Name\r\n* Image Timestamp\r\n\r\nThe header is marked by a special Magic Number, and both the header\r\nand the data portions of the image are secured against corruption by\r\nCRC32 checksums.\r\n\r\n\r\nLinux Support:\r\n==============\r\n\r\nAlthough U-Boot should support any OS or standalone application\r\neasily, the main focus has always been on Linux during the design of\r\nU-Boot.\r\n\r\nU-Boot includes many features that so far have been part of some\r\nspecial \"boot loader\" code within the Linux kernel. Also, any\r\n\"initrd\" images to be used are no longer part of one big Linux image;\r\ninstead, kernel and \"initrd\" are separate images. This implementation\r\nserves several purposes:\r\n\r\n- the same features can be used for other OS or standalone\r\n  applications (for instance: using compressed images to reduce the\r\n  Flash memory footprint)\r\n\r\n- it becomes much easier to port new Linux kernel versions because\r\n  lots of low-level, hardware dependent stuff are done by U-Boot\r\n\r\n- the same Linux kernel image can now be used with different \"initrd\"\r\n  images; of course this also means that different kernel images can\r\n  be run with the same \"initrd\". This makes testing easier (you don't\r\n  have to build a new \"zImage.initrd\" Linux image when you just\r\n  change a file in your \"initrd\"). Also, a field-upgrade of the\r\n  software is easier now.\r\n\r\n\r\nLinux HOWTO:\r\n============\r\n\r\nPorting Linux to U-Boot based systems:\r\n---------------------------------------\r\n\r\nU-Boot cannot save you from doing all the necessary modifications to\r\nconfigure the Linux device drivers for use with your target hardware\r\n(no, we don't intend to provide a full virtual machine interface to\r\nLinux :-).\r\n\r\nBut now you can ignore ALL boot loader code (in arch/powerpc/mbxboot).\r\n\r\nJust make sure your machine specific header file (for instance\r\ninclude/asm-ppc/tqm8xx.h) includes the same definition of the Board\r\nInformation structure as we define in include/asm-<arch>/u-boot.h,\r\nand make sure that your definition of IMAP_ADDR uses the same value\r\nas your U-Boot configuration in CONFIG_SYS_IMMR.\r\n\r\n\r\nConfiguring the Linux kernel:\r\n-----------------------------\r\n\r\nNo specific requirements for U-Boot. Make sure you have some root\r\ndevice (initial ramdisk, NFS) for your target system.\r\n\r\n\r\nBuilding a Linux Image:\r\n-----------------------\r\n\r\nWith U-Boot, \"normal\" build targets like \"zImage\" or \"bzImage\" are\r\nnot used. If you use recent kernel source, a new build target\r\n\"uImage\" will exist which automatically builds an image usable by\r\nU-Boot. Most older kernels also have support for a \"pImage\" target,\r\nwhich was introduced for our predecessor project PPCBoot and uses a\r\n100% compatible format.\r\n\r\nExample:\r\n\r\n\tmake TQM850L_config\r\n\tmake oldconfig\r\n\tmake dep\r\n\tmake uImage\r\n\r\nThe \"uImage\" build target uses a special tool (in 'tools/mkimage') to\r\nencapsulate a compressed Linux kernel image with header\t information,\r\nCRC32 checksum etc. for use with U-Boot. This is what we are doing:\r\n\r\n* build a standard \"vmlinux\" kernel image (in ELF binary format):\r\n\r\n* convert the kernel into a raw binary image:\r\n\r\n\t${CROSS_COMPILE}-objcopy -O binary \\\r\n\t\t\t\t -R .note -R .comment \\\r\n\t\t\t\t -S vmlinux linux.bin\r\n\r\n* compress the binary image:\r\n\r\n\tgzip -9 linux.bin\r\n\r\n* package compressed binary image for U-Boot:\r\n\r\n\tmkimage -A ppc -O linux -T kernel -C gzip \\\r\n\t\t-a 0 -e 0 -n \"Linux Kernel Image\" \\\r\n\t\t-d linux.bin.gz uImage\r\n\r\n\r\nThe \"mkimage\" tool can also be used to create ramdisk images for use\r\nwith U-Boot, either separated from the Linux kernel image, or\r\ncombined into one file. \"mkimage\" encapsulates the images with a 64\r\nbyte header containing information about target architecture,\r\noperating system, image type, compression method, entry points, time\r\nstamp, CRC32 checksums, etc.\r\n\r\n\"mkimage\" can be called in two ways: to verify existing images and\r\nprint the header information, or to build new images.\r\n\r\nIn the first form (with \"-l\" option) mkimage lists the information\r\ncontained in the header of an existing U-Boot image; this includes\r\nchecksum verification:\r\n\r\n\ttools/mkimage -l image\r\n\t  -l ==> list image header information\r\n\r\nThe second form (with \"-d\" option) is used to build a U-Boot image\r\nfrom a \"data file\" which is used as image payload:\r\n\r\n\ttools/mkimage -A arch -O os -T type -C comp -a addr -e ep \\\r\n\t\t      -n name -d data_file image\r\n\t  -A ==> set architecture to 'arch'\r\n\t  -O ==> set operating system to 'os'\r\n\t  -T ==> set image type to 'type'\r\n\t  -C ==> set compression type 'comp'\r\n\t  -a ==> set load address to 'addr' (hex)\r\n\t  -e ==> set entry point to 'ep' (hex)\r\n\t  -n ==> set image name to 'name'\r\n\t  -d ==> use image data from 'datafile'\r\n\r\nRight now, all Linux kernels for PowerPC systems use the same load\r\naddress (0x00000000), but the entry point address depends on the\r\nkernel version:\r\n\r\n- 2.2.x kernels have the entry point at 0x0000000C,\r\n- 2.3.x and later kernels have the entry point at 0x00000000.\r\n\r\nSo a typical call to build a U-Boot image would read:\r\n\r\n\t-> tools/mkimage -n '2.4.4 kernel for TQM850L' \\\r\n\t> -A ppc -O linux -T kernel -C gzip -a 0 -e 0 \\\r\n\t> -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz \\\r\n\t> examples/uImage.TQM850L\r\n\tImage Name:   2.4.4 kernel for TQM850L\r\n\tCreated:      Wed Jul 19 02:34:59 2000\r\n\tImage Type:   PowerPC Linux Kernel Image (gzip compressed)\r\n\tData Size:    335725 Bytes = 327.86 kB = 0.32 MB\r\n\tLoad Address: 0x00000000\r\n\tEntry Point:  0x00000000\r\n\r\nTo verify the contents of the image (or check for corruption):\r\n\r\n\t-> tools/mkimage -l examples/uImage.TQM850L\r\n\tImage Name:   2.4.4 kernel for TQM850L\r\n\tCreated:      Wed Jul 19 02:34:59 2000\r\n\tImage Type:   PowerPC Linux Kernel Image (gzip compressed)\r\n\tData Size:    335725 Bytes = 327.86 kB = 0.32 MB\r\n\tLoad Address: 0x00000000\r\n\tEntry Point:  0x00000000\r\n\r\nNOTE: for embedded systems where boot time is critical you can trade\r\nspeed for memory and install an UNCOMPRESSED image instead: this\r\nneeds more space in Flash, but boots much faster since it does not\r\nneed to be uncompressed:\r\n\r\n\t-> gunzip /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz\r\n\t-> tools/mkimage -n '2.4.4 kernel for TQM850L' \\\r\n\t> -A ppc -O linux -T kernel -C none -a 0 -e 0 \\\r\n\t> -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux \\\r\n\t> examples/uImage.TQM850L-uncompressed\r\n\tImage Name:   2.4.4 kernel for TQM850L\r\n\tCreated:      Wed Jul 19 02:34:59 2000\r\n\tImage Type:   PowerPC Linux Kernel Image (uncompressed)\r\n\tData Size:    792160 Bytes = 773.59 kB = 0.76 MB\r\n\tLoad Address: 0x00000000\r\n\tEntry Point:  0x00000000\r\n\r\n\r\nSimilar you can build U-Boot images from a 'ramdisk.image.gz' file\r\nwhen your kernel is intended to use an initial ramdisk:\r\n\r\n\t-> tools/mkimage -n 'Simple Ramdisk Image' \\\r\n\t> -A ppc -O linux -T ramdisk -C gzip \\\r\n\t> -d /LinuxPPC/images/SIMPLE-ramdisk.image.gz examples/simple-initrd\r\n\tImage Name:   Simple Ramdisk Image\r\n\tCreated:      Wed Jan 12 14:01:50 2000\r\n\tImage Type:   PowerPC Linux RAMDisk Image (gzip compressed)\r\n\tData Size:    566530 Bytes = 553.25 kB = 0.54 MB\r\n\tLoad Address: 0x00000000\r\n\tEntry Point:  0x00000000\r\n\r\n\r\nInstalling a Linux Image:\r\n-------------------------\r\n\r\nTo downloading a U-Boot image over the serial (console) interface,\r\nyou must convert the image to S-Record format:\r\n\r\n\tobjcopy -I binary -O srec examples/image examples/image.srec\r\n\r\nThe 'objcopy' does not understand the information in the U-Boot\r\nimage header, so the resulting S-Record file will be relative to\r\naddress 0x00000000. To load it to a given address, you need to\r\nspecify the target address as 'offset' parameter with the 'loads'\r\ncommand.\r\n\r\nExample: install the image to address 0x40100000 (which on the\r\nTQM8xxL is in the first Flash bank):\r\n\r\n\t=> erase 40100000 401FFFFF\r\n\r\n\t.......... done\r\n\tErased 8 sectors\r\n\r\n\t=> loads 40100000\r\n\t## Ready for S-Record download ...\r\n\t~>examples/image.srec\r\n\t1 2 3 4 5 6 7 8 9 10 11 12 13 ...\r\n\t...\r\n\t15989 15990 15991 15992\r\n\t[file transfer complete]\r\n\t[connected]\r\n\t## Start Addr = 0x00000000\r\n\r\n\r\nYou can check the success of the download using the 'iminfo' command;\r\nthis includes a checksum verification so you can be sure no data\r\ncorruption happened:\r\n\r\n\t=> imi 40100000\r\n\r\n\t## Checking Image at 40100000 ...\r\n\t   Image Name:\t 2.2.13 for initrd on TQM850L\r\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\r\n\t   Data Size:\t 335725 Bytes = 327 kB = 0 MB\r\n\t   Load Address: 00000000\r\n\t   Entry Point:\t 0000000c\r\n\t   Verifying Checksum ... OK\r\n\r\n\r\nBoot Linux:\r\n-----------\r\n\r\nThe \"bootm\" command is used to boot an application that is stored in\r\nmemory (RAM or Flash). In case of a Linux kernel image, the contents\r\nof the \"bootargs\" environment variable is passed to the kernel as\r\nparameters. You can check and modify this variable using the\r\n\"printenv\" and \"setenv\" commands:\r\n\r\n\r\n\t=> printenv bootargs\r\n\tbootargs=root=/dev/ram\r\n\r\n\t=> setenv bootargs root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2\r\n\r\n\t=> printenv bootargs\r\n\tbootargs=root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2\r\n\r\n\t=> bootm 40020000\r\n\t## Booting Linux kernel at 40020000 ...\r\n\t   Image Name:\t 2.2.13 for NFS on TQM850L\r\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\r\n\t   Data Size:\t 381681 Bytes = 372 kB = 0 MB\r\n\t   Load Address: 00000000\r\n\t   Entry Point:\t 0000000c\r\n\t   Verifying Checksum ... OK\r\n\t   Uncompressing Kernel Image ... OK\r\n\tLinux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:35:17 MEST 2000\r\n\tBoot arguments: root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2\r\n\ttime_init: decrementer frequency = 187500000/60\r\n\tCalibrating delay loop... 49.77 BogoMIPS\r\n\tMemory: 15208k available (700k kernel code, 444k data, 32k init) [c0000000,c1000000]\r\n\t...\r\n\r\nIf you want to boot a Linux kernel with initial RAM disk, you pass\r\nthe memory addresses of both the kernel and the initrd image (PPBCOOT\r\nformat!) to the \"bootm\" command:\r\n\r\n\t=> imi 40100000 40200000\r\n\r\n\t## Checking Image at 40100000 ...\r\n\t   Image Name:\t 2.2.13 for initrd on TQM850L\r\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\r\n\t   Data Size:\t 335725 Bytes = 327 kB = 0 MB\r\n\t   Load Address: 00000000\r\n\t   Entry Point:\t 0000000c\r\n\t   Verifying Checksum ... OK\r\n\r\n\t## Checking Image at 40200000 ...\r\n\t   Image Name:\t Simple Ramdisk Image\r\n\t   Image Type:\t PowerPC Linux RAMDisk Image (gzip compressed)\r\n\t   Data Size:\t 566530 Bytes = 553 kB = 0 MB\r\n\t   Load Address: 00000000\r\n\t   Entry Point:\t 00000000\r\n\t   Verifying Checksum ... OK\r\n\r\n\t=> bootm 40100000 40200000\r\n\t## Booting Linux kernel at 40100000 ...\r\n\t   Image Name:\t 2.2.13 for initrd on TQM850L\r\n\t   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\r\n\t   Data Size:\t 335725 Bytes = 327 kB = 0 MB\r\n\t   Load Address: 00000000\r\n\t   Entry Point:\t 0000000c\r\n\t   Verifying Checksum ... OK\r\n\t   Uncompressing Kernel Image ... OK\r\n\t## Loading RAMDisk Image at 40200000 ...\r\n\t   Image Name:\t Simple Ramdisk Image\r\n\t   Image Type:\t PowerPC Linux RAMDisk Image (gzip compressed)\r\n\t   Data Size:\t 566530 Bytes = 553 kB = 0 MB\r\n\t   Load Address: 00000000\r\n\t   Entry Point:\t 00000000\r\n\t   Verifying Checksum ... OK\r\n\t   Loading Ramdisk ... OK\r\n\tLinux version 2.2.13 (wd@denx.local.net) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:32:08 MEST 2000\r\n\tBoot arguments: root=/dev/ram\r\n\ttime_init: decrementer frequency = 187500000/60\r\n\tCalibrating delay loop... 49.77 BogoMIPS\r\n\t...\r\n\tRAMDISK: Compressed image found at block 0\r\n\tVFS: Mounted root (ext2 filesystem).\r\n\r\n\tbash#\r\n\r\nBoot Linux and pass a flat device tree:\r\n-----------\r\n\r\nFirst, U-Boot must be compiled with the appropriate defines. See the section\r\ntitled \"Linux Kernel Interface\" above for a more in depth explanation. The\r\nfollowing is an example of how to start a kernel and pass an updated\r\nflat device tree:\r\n\r\n=> print oftaddr\r\noftaddr=0x300000\r\n=> print oft\r\noft=oftrees/mpc8540ads.dtb\r\n=> tftp $oftaddr $oft\r\nSpeed: 1000, full duplex\r\nUsing TSEC0 device\r\nTFTP from server 192.168.1.1; our IP address is 192.168.1.101\r\nFilename 'oftrees/mpc8540ads.dtb'.\r\nLoad address: 0x300000\r\nLoading: #\r\ndone\r\nBytes transferred = 4106 (100a hex)\r\n=> tftp $loadaddr $bootfile\r\nSpeed: 1000, full duplex\r\nUsing TSEC0 device\r\nTFTP from server 192.168.1.1; our IP address is 192.168.1.2\r\nFilename 'uImage'.\r\nLoad address: 0x200000\r\nLoading:############\r\ndone\r\nBytes transferred = 1029407 (fb51f hex)\r\n=> print loadaddr\r\nloadaddr=200000\r\n=> print oftaddr\r\noftaddr=0x300000\r\n=> bootm $loadaddr - $oftaddr\r\n## Booting image at 00200000 ...\r\n   Image Name:\t Linux-2.6.17-dirty\r\n   Image Type:\t PowerPC Linux Kernel Image (gzip compressed)\r\n   Data Size:\t 1029343 Bytes = 1005.2 kB\r\n   Load Address: 00000000\r\n   Entry Point:\t 00000000\r\n   Verifying Checksum ... OK\r\n   Uncompressing Kernel Image ... OK\r\nBooting using flat device tree at 0x300000\r\nUsing MPC85xx ADS machine description\r\nMemory CAM mapping: CAM0=256Mb, CAM1=256Mb, CAM2=0Mb residual: 0Mb\r\n[snip]\r\n\r\n\r\nMore About U-Boot Image Types:\r\n------------------------------\r\n\r\nU-Boot supports the following image types:\r\n\r\n   \"Standalone Programs\" are directly runnable in the environment\r\n\tprovided by U-Boot; it is expected that (if they behave\r\n\twell) you can continue to work in U-Boot after return from\r\n\tthe Standalone Program.\r\n   \"OS Kernel Images\" are usually images of some Embedded OS which\r\n\twill take over control completely. Usually these programs\r\n\twill install their own set of exception handlers, device\r\n\tdrivers, set up the MMU, etc. - this means, that you cannot\r\n\texpect to re-enter U-Boot except by resetting the CPU.\r\n   \"RAMDisk Images\" are more or less just data blocks, and their\r\n\tparameters (address, size) are passed to an OS kernel that is\r\n\tbeing started.\r\n   \"Multi-File Images\" contain several images, typically an OS\r\n\t(Linux) kernel image and one or more data images like\r\n\tRAMDisks. This construct is useful for instance when you want\r\n\tto boot over the network using BOOTP etc., where the boot\r\n\tserver provides just a single image file, but you want to get\r\n\tfor instance an OS kernel and a RAMDisk image.\r\n\r\n\t\"Multi-File Images\" start with a list of image sizes, each\r\n\timage size (in bytes) specified by an \"uint32_t\" in network\r\n\tbyte order. This list is terminated by an \"(uint32_t)0\".\r\n\tImmediately after the terminating 0 follow the images, one by\r\n\tone, all aligned on \"uint32_t\" boundaries (size rounded up to\r\n\ta multiple of 4 bytes).\r\n\r\n   \"Firmware Images\" are binary images containing firmware (like\r\n\tU-Boot or FPGA images) which usually will be programmed to\r\n\tflash memory.\r\n\r\n   \"Script files\" are command sequences that will be executed by\r\n\tU-Boot's command interpreter; this feature is especially\r\n\tuseful when you configure U-Boot to use a real shell (hush)\r\n\tas command interpreter.\r\n\r\n\r\nStandalone HOWTO:\r\n=================\r\n\r\nOne of the features of U-Boot is that you can dynamically load and\r\nrun \"standalone\" applications, which can use some resources of\r\nU-Boot like console I/O functions or interrupt services.\r\n\r\nTwo simple examples are included with the sources:\r\n\r\n\"Hello World\" Demo:\r\n-------------------\r\n\r\n'examples/hello_world.c' contains a small \"Hello World\" Demo\r\napplication; it is automatically compiled when you build U-Boot.\r\nIt's configured to run at address 0x00040004, so you can play with it\r\nlike that:\r\n\r\n\t=> loads\r\n\t## Ready for S-Record download ...\r\n\t~>examples/hello_world.srec\r\n\t1 2 3 4 5 6 7 8 9 10 11 ...\r\n\t[file transfer complete]\r\n\t[connected]\r\n\t## Start Addr = 0x00040004\r\n\r\n\t=> go 40004 Hello World! This is a test.\r\n\t## Starting application at 0x00040004 ...\r\n\tHello World\r\n\targc = 7\r\n\targv[0] = \"40004\"\r\n\targv[1] = \"Hello\"\r\n\targv[2] = \"World!\"\r\n\targv[3] = \"This\"\r\n\targv[4] = \"is\"\r\n\targv[5] = \"a\"\r\n\targv[6] = \"test.\"\r\n\targv[7] = \"<NULL>\"\r\n\tHit any key to exit ...\r\n\r\n\t## Application terminated, rc = 0x0\r\n\r\nAnother example, which demonstrates how to register a CPM interrupt\r\nhandler with the U-Boot code, can be found in 'examples/timer.c'.\r\nHere, a CPM timer is set up to generate an interrupt every second.\r\nThe interrupt service routine is trivial, just printing a '.'\r\ncharacter, but this is just a demo program. The application can be\r\ncontrolled by the following keys:\r\n\r\n\t? - print current values og the CPM Timer registers\r\n\tb - enable interrupts and start timer\r\n\te - stop timer and disable interrupts\r\n\tq - quit application\r\n\r\n\t=> loads\r\n\t## Ready for S-Record download ...\r\n\t~>examples/timer.srec\r\n\t1 2 3 4 5 6 7 8 9 10 11 ...\r\n\t[file transfer complete]\r\n\t[connected]\r\n\t## Start Addr = 0x00040004\r\n\r\n\t=> go 40004\r\n\t## Starting application at 0x00040004 ...\r\n\tTIMERS=0xfff00980\r\n\tUsing timer 1\r\n\t  tgcr @ 0xfff00980, tmr @ 0xfff00990, trr @ 0xfff00994, tcr @ 0xfff00998, tcn @ 0xfff0099c, ter @ 0xfff009b0\r\n\r\nHit 'b':\r\n\t[q, b, e, ?] Set interval 1000000 us\r\n\tEnabling timer\r\nHit '?':\r\n\t[q, b, e, ?] ........\r\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0xef6, ter=0x0\r\nHit '?':\r\n\t[q, b, e, ?] .\r\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x2ad4, ter=0x0\r\nHit '?':\r\n\t[q, b, e, ?] .\r\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x1efc, ter=0x0\r\nHit '?':\r\n\t[q, b, e, ?] .\r\n\ttgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x169d, ter=0x0\r\nHit 'e':\r\n\t[q, b, e, ?] ...Stopping timer\r\nHit 'q':\r\n\t[q, b, e, ?] ## Application terminated, rc = 0x0\r\n\r\n\r\nMinicom warning:\r\n================\r\n\r\nOver time, many people have reported problems when trying to use the\r\n\"minicom\" terminal emulation program for serial download. I (wd)\r\nconsider minicom to be broken, and recommend not to use it. Under\r\nUnix, I recommend to use C-Kermit for general purpose use (and\r\nespecially for kermit binary protocol download (\"loadb\" command), and\r\nuse \"cu\" for S-Record download (\"loads\" command).\r\n\r\nNevertheless, if you absolutely want to use it try adding this\r\nconfiguration to your \"File transfer protocols\" section:\r\n\r\n\t   Name\t   Program\t\t\tName U/D FullScr IO-Red. Multi\r\n\tX  kermit  /usr/bin/kermit -i -l %l -s\t Y    U\t   Y\t   N\t  N\r\n\tY  kermit  /usr/bin/kermit -i -l %l -r\t N    D\t   Y\t   N\t  N\r\n\r\n\r\nNetBSD Notes:\r\n=============\r\n\r\nStarting at version 0.9.2, U-Boot supports NetBSD both as host\r\n(build U-Boot) and target system (boots NetBSD/mpc8xx).\r\n\r\nBuilding requires a cross environment; it is known to work on\r\nNetBSD/i386 with the cross-powerpc-netbsd-1.3 package (you will also\r\nneed gmake since the Makefiles are not compatible with BSD make).\r\nNote that the cross-powerpc package does not install include files;\r\nattempting to build U-Boot will fail because <machine/ansi.h> is\r\nmissing.  This file has to be installed and patched manually:\r\n\r\n\t# cd /usr/pkg/cross/powerpc-netbsd/include\r\n\t# mkdir powerpc\r\n\t# ln -s powerpc machine\r\n\t# cp /usr/src/sys/arch/powerpc/include/ansi.h powerpc/ansi.h\r\n\t# ${EDIT} powerpc/ansi.h\t## must remove __va_list, _BSD_VA_LIST\r\n\r\nNative builds *don't* work due to incompatibilities between native\r\nand U-Boot include files.\r\n\r\nBooting assumes that (the first part of) the image booted is a\r\nstage-2 loader which in turn loads and then invokes the kernel\r\nproper. Loader sources will eventually appear in the NetBSD source\r\ntree (probably in sys/arc/mpc8xx/stand/u-boot_stage2/); in the\r\nmeantime, see ftp://ftp.denx.de/pub/u-boot/ppcboot_stage2.tar.gz\r\n\r\n\r\nImplementation Internals:\r\n=========================\r\n\r\nThe following is not intended to be a complete description of every\r\nimplementation detail. However, it should help to understand the\r\ninner workings of U-Boot and make it easier to port it to custom\r\nhardware.\r\n\r\n\r\nInitial Stack, Global Data:\r\n---------------------------\r\n\r\nThe implementation of U-Boot is complicated by the fact that U-Boot\r\nstarts running out of ROM (flash memory), usually without access to\r\nsystem RAM (because the memory controller is not initialized yet).\r\nThis means that we don't have writable Data or BSS segments, and BSS\r\nis not initialized as zero. To be able to get a C environment working\r\nat all, we have to allocate at least a minimal stack. Implementation\r\noptions for this are defined and restricted by the CPU used: Some CPU\r\nmodels provide on-chip memory (like the IMMR area on MPC8xx and\r\nMPC826x processors), on others (parts of) the data cache can be\r\nlocked as (mis-) used as memory, etc.\r\n\r\n\tChris Hallinan posted a good summary of these issues to the\r\n\tU-Boot mailing list:\r\n\r\n\tSubject: RE: [U-Boot-Users] RE: More On Memory Bank x (nothingness)?\r\n\tFrom: \"Chris Hallinan\" <clh@net1plus.com>\r\n\tDate: Mon, 10 Feb 2003 16:43:46 -0500 (22:43 MET)\r\n\t...\r\n\r\n\tCorrect me if I'm wrong, folks, but the way I understand it\r\n\tis this: Using DCACHE as initial RAM for Stack, etc, does not\r\n\trequire any physical RAM backing up the cache. The cleverness\r\n\tis that the cache is being used as a temporary supply of\r\n\tnecessary storage before the SDRAM controller is setup. It's\r\n\tbeyond the scope of this list to explain the details, but you\r\n\tcan see how this works by studying the cache architecture and\r\n\toperation in the architecture and processor-specific manuals.\r\n\r\n\tOCM is On Chip Memory, which I believe the 405GP has 4K. It\r\n\tis another option for the system designer to use as an\r\n\tinitial stack/RAM area prior to SDRAM being available. Either\r\n\toption should work for you. Using CS 4 should be fine if your\r\n\tboard designers haven't used it for something that would\r\n\tcause you grief during the initial boot! It is frequently not\r\n\tused.\r\n\r\n\tCONFIG_SYS_INIT_RAM_ADDR should be somewhere that won't interfere\r\n\twith your processor/board/system design. The default value\r\n\tyou will find in any recent u-boot distribution in\r\n\twalnut.h should work for you. I'd set it to a value larger\r\n\tthan your SDRAM module. If you have a 64MB SDRAM module, set\r\n\tit above 400_0000. Just make sure your board has no resources\r\n\tthat are supposed to respond to that address! That code in\r\n\tstart.S has been around a while and should work as is when\r\n\tyou get the config right.\r\n\r\n\t-Chris Hallinan\r\n\tDS4.COM, Inc.\r\n\r\nIt is essential to remember this, since it has some impact on the C\r\ncode for the initialization procedures:\r\n\r\n* Initialized global data (data segment) is read-only. Do not attempt\r\n  to write it.\r\n\r\n* Do not use any uninitialized global data (or implicitely initialized\r\n  as zero data - BSS segment) at all - this is undefined, initiali-\r\n  zation is performed later (when relocating to RAM).\r\n\r\n* Stack space is very limited. Avoid big data buffers or things like\r\n  that.\r\n\r\nHaving only the stack as writable memory limits means we cannot use\r\nnormal global data to share information beween the code. But it\r\nturned out that the implementation of U-Boot can be greatly\r\nsimplified by making a global data structure (gd_t) available to all\r\nfunctions. We could pass a pointer to this data as argument to _all_\r\nfunctions, but this would bloat the code. Instead we use a feature of\r\nthe GCC compiler (Global Register Variables) to share the data: we\r\nplace a pointer (gd) to the global data into a register which we\r\nreserve for this purpose.\r\n\r\nWhen choosing a register for such a purpose we are restricted by the\r\nrelevant  (E)ABI  specifications for the current architecture, and by\r\nGCC's implementation.\r\n\r\nFor PowerPC, the following registers have specific use:\r\n\tR1:\tstack pointer\r\n\tR2:\treserved for system use\r\n\tR3-R4:\tparameter passing and return values\r\n\tR5-R10: parameter passing\r\n\tR13:\tsmall data area pointer\r\n\tR30:\tGOT pointer\r\n\tR31:\tframe pointer\r\n\r\n\t(U-Boot also uses R12 as internal GOT pointer. r12\r\n\tis a volatile register so r12 needs to be reset when\r\n\tgoing back and forth between asm and C)\r\n\r\n    ==> U-Boot will use R2 to hold a pointer to the global data\r\n\r\n    Note: on PPC, we could use a static initializer (since the\r\n    address of the global data structure is known at compile time),\r\n    but it turned out that reserving a register results in somewhat\r\n    smaller code - although the code savings are not that big (on\r\n    average for all boards 752 bytes for the whole U-Boot image,\r\n    624 text + 127 data).\r\n\r\nOn Blackfin, the normal C ABI (except for P3) is followed as documented here:\r\n\thttp://docs.blackfin.uclinux.org/doku.php?id=application_binary_interface\r\n\r\n    ==> U-Boot will use P3 to hold a pointer to the global data\r\n\r\nOn ARM, the following registers are used:\r\n\r\n\tR0:\tfunction argument word/integer result\r\n\tR1-R3:\tfunction argument word\r\n\tR9:\tGOT pointer\r\n\tR10:\tstack limit (used only if stack checking if enabled)\r\n\tR11:\targument (frame) pointer\r\n\tR12:\ttemporary workspace\r\n\tR13:\tstack pointer\r\n\tR14:\tlink register\r\n\tR15:\tprogram counter\r\n\r\n    ==> U-Boot will use R8 to hold a pointer to the global data\r\n\r\nOn Nios II, the ABI is documented here:\r\n\thttp://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf\r\n\r\n    ==> U-Boot will use gp to hold a pointer to the global data\r\n\r\n    Note: on Nios II, we give \"-G0\" option to gcc and don't use gp\r\n    to access small data sections, so gp is free.\r\n\r\nNOTE: DECLARE_GLOBAL_DATA_PTR must be used with file-global scope,\r\nor current versions of GCC may \"optimize\" the code too much.\r\n\r\nMemory Management:\r\n------------------\r\n\r\nU-Boot runs in system state and uses physical addresses, i.e. the\r\nMMU is not used either for address mapping nor for memory protection.\r\n\r\nThe available memory is mapped to fixed addresses using the memory\r\ncontroller. In this process, a contiguous block is formed for each\r\nmemory type (Flash, SDRAM, SRAM), even when it consists of several\r\nphysical memory banks.\r\n\r\nU-Boot is installed in the first 128 kB of the first Flash bank (on\r\nTQM8xxL modules this is the range 0x40000000 ... 0x4001FFFF). After\r\nbooting and sizing and initializing DRAM, the code relocates itself\r\nto the upper end of DRAM. Immediately below the U-Boot code some\r\nmemory is reserved for use by malloc() [see CONFIG_SYS_MALLOC_LEN\r\nconfiguration setting]. Below that, a structure with global Board\r\nInfo data is placed, followed by the stack (growing downward).\r\n\r\nAdditionally, some exception handler code is copied to the low 8 kB\r\nof DRAM (0x00000000 ... 0x00001FFF).\r\n\r\nSo a typical memory configuration with 16 MB of DRAM could look like\r\nthis:\r\n\r\n\t0x0000 0000\tException Vector code\r\n\t      :\r\n\t0x0000 1FFF\r\n\t0x0000 2000\tFree for Application Use\r\n\t      :\r\n\t      :\r\n\r\n\t      :\r\n\t      :\r\n\t0x00FB FF20\tMonitor Stack (Growing downward)\r\n\t0x00FB FFAC\tBoard Info Data and permanent copy of global data\r\n\t0x00FC 0000\tMalloc Arena\r\n\t      :\r\n\t0x00FD FFFF\r\n\t0x00FE 0000\tRAM Copy of Monitor Code\r\n\t...\t\teventually: LCD or video framebuffer\r\n\t...\t\teventually: pRAM (Protected RAM - unchanged by reset)\r\n\t0x00FF FFFF\t[End of RAM]\r\n\r\n\r\nSystem Initialization:\r\n----------------------\r\n\r\nIn the reset configuration, U-Boot starts at the reset entry point\r\n(on most PowerPC systems at address 0x00000100). Because of the reset\r\nconfiguration for CS0# this is a mirror of the onboard Flash memory.\r\nTo be able to re-map memory U-Boot then jumps to its link address.\r\nTo be able to implement the initialization code in C, a (small!)\r\ninitial stack is set up in the internal Dual Ported RAM (in case CPUs\r\nwhich provide such a feature like MPC8xx or MPC8260), or in a locked\r\npart of the data cache. After that, U-Boot initializes the CPU core,\r\nthe caches and the SIU.\r\n\r\nNext, all (potentially) available memory banks are mapped using a\r\npreliminary mapping. For example, we put them on 512 MB boundaries\r\n(multiples of 0x20000000: SDRAM on 0x00000000 and 0x20000000, Flash\r\non 0x40000000 and 0x60000000, SRAM on 0x80000000). Then UPM A is\r\nprogrammed for SDRAM access. Using the temporary configuration, a\r\nsimple memory test is run that determines the size of the SDRAM\r\nbanks.\r\n\r\nWhen there is more than one SDRAM bank, and the banks are of\r\ndifferent size, the largest is mapped first. For equal size, the first\r\nbank (CS2#) is mapped first. The first mapping is always for address\r\n0x00000000, with any additional banks following immediately to create\r\ncontiguous memory starting from 0.\r\n\r\nThen, the monitor installs itself at the upper end of the SDRAM area\r\nand allocates memory for use by malloc() and for the global Board\r\nInfo data; also, the exception vector code is copied to the low RAM\r\npages, and the final stack is set up.\r\n\r\nOnly after this relocation will you have a \"normal\" C environment;\r\nuntil that you are restricted in several ways, mostly because you are\r\nrunning from ROM, and because the code will have to be relocated to a\r\nnew address in RAM.\r\n\r\n\r\nU-Boot Porting Guide:\r\n----------------------\r\n\r\n[Based on messages by Jerry Van Baren in the U-Boot-Users mailing\r\nlist, October 2002]\r\n\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n\tsighandler_t no_more_time;\r\n\r\n\tsignal(SIGALRM, no_more_time);\r\n\talarm(PROJECT_DEADLINE - toSec (3 * WEEK));\r\n\r\n\tif (available_money > available_manpower) {\r\n\t\tPay consultant to port U-Boot;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tDownload latest U-Boot source;\r\n\r\n\tSubscribe to u-boot mailing list;\r\n\r\n\tif (clueless)\r\n\t\temail(\"Hi, I am new to U-Boot, how do I get started?\");\r\n\r\n\twhile (learning) {\r\n\t\tRead the README file in the top level directory;\r\n\t\tRead http://www.denx.de/twiki/bin/view/DULG/Manual;\r\n\t\tRead applicable doc/*.README;\r\n\t\tRead the source, Luke;\r\n\t\t/* find . -name \"*.[chS]\" | xargs grep -i <keyword> */\r\n\t}\r\n\r\n\tif (available_money > toLocalCurrency ($2500))\r\n\t\tBuy a BDI3000;\r\n\telse\r\n\t\tAdd a lot of aggravation and time;\r\n\r\n\tif (a similar board exists) {\t/* hopefully... */\r\n\t\tcp -a board/<similar> board/<myboard>\r\n\t\tcp include/configs/<similar>.h include/configs/<myboard>.h\r\n\t} else {\r\n\t\tCreate your own board support subdirectory;\r\n\t\tCreate your own board include/configs/<myboard>.h file;\r\n\t}\r\n\tEdit new board/<myboard> files\r\n\tEdit new include/configs/<myboard>.h\r\n\r\n\twhile (!accepted) {\r\n\t\twhile (!running) {\r\n\t\t\tdo {\r\n\t\t\t\tAdd / modify source code;\r\n\t\t\t} until (compiles);\r\n\t\t\tDebug;\r\n\t\t\tif (clueless)\r\n\t\t\t\temail(\"Hi, I am having problems...\");\r\n\t\t}\r\n\t\tSend patch file to the U-Boot email list;\r\n\t\tif (reasonable critiques)\r\n\t\t\tIncorporate improvements from email list code review;\r\n\t\telse\r\n\t\t\tDefend code as written;\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n\r\nvoid no_more_time (int sig)\r\n{\r\n      hire_a_guru();\r\n}\r\n\r\n\r\nCoding Standards:\r\n-----------------\r\n\r\nAll contributions to U-Boot should conform to the Linux kernel\r\ncoding style; see the file \"Documentation/CodingStyle\" and the script\r\n\"scripts/Lindent\" in your Linux kernel source directory.  In sources\r\noriginating from U-Boot a style corresponding to \"Lindent -pcs\" (adding\r\nspaces before parameters to function calls) is actually used.\r\n\r\nSource files originating from a different project (for example the\r\nMTD subsystem) are generally exempt from these guidelines and are not\r\nreformated to ease subsequent migration to newer versions of those\r\nsources.\r\n\r\nPlease note that U-Boot is implemented in C (and to some small parts in\r\nAssembler); no C++ is used, so please do not use C++ style comments (//)\r\nin your code.\r\n\r\nPlease also stick to the following formatting rules:\r\n- remove any trailing white space\r\n- use TAB characters for indentation, not spaces\r\n- make sure NOT to use DOS '\\r\\n' line feeds\r\n- do not add more than 2 empty lines to source files\r\n- do not add trailing empty lines to source files\r\n\r\nSubmissions which do not conform to the standards may be returned\r\nwith a request to reformat the changes.\r\n\r\n\r\nSubmitting Patches:\r\n-------------------\r\n\r\nSince the number of patches for U-Boot is growing, we need to\r\nestablish some rules. Submissions which do not conform to these rules\r\nmay be rejected, even when they contain important and valuable stuff.\r\n\r\nPlease see http://www.denx.de/wiki/U-Boot/Patches for details.\r\n\r\nPatches shall be sent to the u-boot mailing list <u-boot@lists.denx.de>;\r\nsee http://lists.denx.de/mailman/listinfo/u-boot\r\n\r\nWhen you send a patch, please include the following information with\r\nit:\r\n\r\n* For bug fixes: a description of the bug and how your patch fixes\r\n  this bug. Please try to include a way of demonstrating that the\r\n  patch actually fixes something.\r\n\r\n* For new features: a description of the feature and your\r\n  implementation.\r\n\r\n* A CHANGELOG entry as plaintext (separate from the patch)\r\n\r\n* For major contributions, your entry to the CREDITS file\r\n\r\n* When you add support for a new board, don't forget to add this\r\n  board to the MAKEALL script, too.\r\n\r\n* If your patch adds new configuration options, don't forget to\r\n  document these in the README file.\r\n\r\n* The patch itself. If you are using git (which is *strongly*\r\n  recommended) you can easily generate the patch using the\r\n  \"git-format-patch\". If you then use \"git-send-email\" to send it to\r\n  the U-Boot mailing list, you will avoid most of the common problems\r\n  with some other mail clients.\r\n\r\n  If you cannot use git, use \"diff -purN OLD NEW\". If your version of\r\n  diff does not support these options, then get the latest version of\r\n  GNU diff.\r\n\r\n  The current directory when running this command shall be the parent\r\n  directory of the U-Boot source tree (i. e. please make sure that\r\n  your patch includes sufficient directory information for the\r\n  affected files).\r\n\r\n  We prefer patches as plain text. MIME attachments are discouraged,\r\n  and compressed attachments must not be used.\r\n\r\n* If one logical set of modifications affects or creates several\r\n  files, all these changes shall be submitted in a SINGLE patch file.\r\n\r\n* Changesets that contain different, unrelated modifications shall be\r\n  submitted as SEPARATE patches, one patch per changeset.\r\n\r\n\r\nNotes:\r\n\r\n* Before sending the patch, run the MAKEALL script on your patched\r\n  source tree and make sure that no errors or warnings are reported\r\n  for any of the boards.\r\n\r\n* Keep your modifications to the necessary minimum: A patch\r\n  containing several unrelated changes or arbitrary reformats will be\r\n  returned with a request to re-formatting / split it.\r\n\r\n* If you modify existing code, make sure that your new code does not\r\n  add to the memory footprint of the code ;-) Small is beautiful!\r\n  When adding new features, these should compile conditionally only\r\n  (using #ifdef), and the resulting code with the new feature\r\n  disabled must not need more memory than the old code without your\r\n  modification.\r\n\r\n* Remember that there is a size limit of 100 kB per message on the\r\n  u-boot mailing list. Bigger patches will be moderated. If they are\r\n  reasonable and not too big, they will be acknowledged. But patches\r\n  bigger than the size limit should be avoided.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}